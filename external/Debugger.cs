// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: debugger.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from debugger.proto</summary>
public static partial class DebuggerReflection {

  #region Descriptor
  /// <summary>File descriptor for debugger.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DebuggerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5kZWJ1Z2dlci5wcm90byKUAwoORGJnR3BSZWdpc3RlcnMSDQoFcl9yMTUY",
          "ASABKAQSDQoFcl9yMTQYAiABKAQSDQoFcl9yMTMYAyABKAQSDQoFcl9yMTIY",
          "BCABKAQSDQoFcl9yMTEYBSABKAQSDQoFcl9yMTAYBiABKAQSDAoEcl9yORgH",
          "IAEoBBIMCgRyX3I4GAggASgEEg0KBXJfcmRpGAkgASgEEg0KBXJfcnNpGAog",
          "ASgEEg0KBXJfcmJwGAsgASgEEg0KBXJfcmJ4GAwgASgEEg0KBXJfcmR4GA0g",
          "ASgEEg0KBXJfcmN4GA4gASgEEg0KBXJfcmF4GA8gASgEEhAKCHJfdHJhcG5v",
          "GBAgASgNEgwKBHJfZnMYESABKA0SDAoEcl9ncxgSIAEoDRINCgVyX2VychgT",
          "IAEoDRIMCgRyX2VzGBQgASgNEgwKBHJfZHMYFSABKA0SDQoFcl9yaXAYFiAB",
          "KAQSDAoEcl9jcxgXIAEoBBIQCghyX3JmbGFncxgYIAEoBBINCgVyX3JzcBgZ",
          "IAEoBBIMCgRyX3NzGBogASgEIh4KDkRiZ0ZwUmVnaXN0ZXJzEgwKBGRhdGEY",
          "ASABKAwiIwoORGJnRGJSZWdpc3RlcnMSEQoJZGVidWdSZWdzGAEgAygNIo4B",
          "ChBEYmdUaHJlYWRMaW1pdGVkEgwKBHByb2MYASABKAQSEAoIdGhyZWFkSWQY",
          "AiABKAUSDAoEbmFtZRgDIAEoCRIOCgZyZXR2YWwYBCABKAMSEwoLa2VybmVs",
          "U3RhY2sYBSABKAQSGAoQa2VybmVsU3RhY2tQYWdlcxgGIAEoBRINCgVlcnJu",
          "bxgHIAEoBSL9AQoNRGJnVGhyZWFkRnVsbBIMCgRwcm9jGAEgASgEEhAKCHRo",
          "cmVhZElkGAIgASgFEgwKBG5hbWUYAyABKAkSDgoGcmV0dmFsGAQgASgDEhMK",
          "C2tlcm5lbFN0YWNrGAUgASgEEhgKEGtlcm5lbFN0YWNrUGFnZXMYBiABKAUS",
          "DQoFZXJybm8YByABKAUSJAoLZ3BSZWdpc3RlcnMYCCABKAsyDy5EYmdHcFJl",
          "Z2lzdGVycxIkCgtmcFJlZ2lzdGVycxgJIAEoCzIPLkRiZ0ZwUmVnaXN0ZXJz",
          "EiQKC2RiUmVnaXN0ZXJzGAogASgLMg8uRGJnRGJSZWdpc3RlcnMizgEKB0Ri",
          "Z0NyZWQSFwoPZWZmZWN0aXZlVXNlcklkGAEgASgNEhIKCnJlYWxVc2VySWQY",
          "AiABKA0SEwoLc2F2ZWRVc2VySWQYAyABKA0SEQoJbnVtR3JvdXBzGAQgASgF",
          "EhMKC3JlYWxHcm91cElkGAUgASgNEhQKDHNhdmVkR3JvdXBJZBgGIAEoDRIO",
          "CgZwcmlzb24YByABKAQSEQoJc2NlQXV0aElkGAggASgEEg8KB3NjZUNhcHMY",
          "CSADKAQSDwoHc2NlQXR0chgKIAMoBCINCgtEYmdGaWxlRGVzYyKoAwoORGJn",
          "UHJvY2Vzc0Z1bGwSIgoHdGhyZWFkcxgBIAMoCzIRLkRiZ1RocmVhZExpbWl0",
          "ZWQSFgoEY3JlZBgCIAEoCzIILkRiZ0NyZWQSCwoDcGlkGAMgASgFEhIKCnBh",
          "cmVudFByb2MYBCABKAQSDQoFb3BwaWQYBSABKAUSEAoIZGJnQ2hpbGQYBiAB",
          "KAUSDwoHdm1zcGFjZRgHIAEoBBITCgtleGl0VGhyZWFkcxgIIAEoBRIRCglz",
          "aWdQYXJlbnQYCSABKAUSCwoDc2lnGAogASgFEgwKBGNvZGUYCyABKA0SDQoF",
          "c3RvcHMYDCABKA0SDQoFc3R5cGUYDSABKA0SFAoMc2luZ2xlVGhyZWFkGA4g",
          "ASgEEhQKDHN1c3BlbmRDb3VudBgPIAEoBRIOCgZkeW5saWIYECABKAQSDAoE",
          "bmFtZRgRIAEoCRIPCgdlbGZQYXRoGBIgASgJEhYKDnJhbmRvbWl6ZWRQYXRo",
          "GBMgASgJEhIKCm51bVRocmVhZHMYFCABKAUSHwoKbWFwRW50cmllcxgVIAMo",
          "CzILLkRiZ1ZtRW50cnkiWgoKRGJnVm1FbnRyeRIMCgRuYW1lGAEgASgJEg0K",
          "BXN0YXJ0GAIgASgEEgsKA2VuZBgDIAEoBBIOCgZvZmZzZXQYBCABKAQSEgoK",
          "cHJvdGVjdGlvbhgFIAEoBSJMChFEYmdQcm9jZXNzTGltaXRlZBILCgNwaWQY",
          "ASABKAUSDAoEbmFtZRgCIAEoCRIcCgdlbnRyaWVzGAMgAygLMgsuRGJnVm1F",
          "bnRyeSJCChlEYmdHZXRQcm9jZXNzTGlzdFJlc3BvbnNlEiUKCXByb2Nlc3Nl",
          "cxgBIAMoCzISLkRiZ1Byb2Nlc3NMaW1pdGVkIkkKG0RiZ1JlYWRQcm9jZXNz",
          "TWVtb3J5UmVxdWVzdBILCgNwaWQYASABKAUSDwoHYWRkcmVzcxgCIAEoBBIM",
          "CgRzaXplGAMgASgNIj8KHERiZ1JlYWRQcm9jZXNzTWVtb3J5UmVzcG9uc2US",
          "EQoJYnl0ZXNSZWFkGAEgASgNEgwKBGRhdGEYAiABKAwiSgocRGJnV3JpdGVQ",
          "cm9jZXNzTWVtb3J5UmVxdWVzdBILCgNwaWQYASABKAUSDwoHYWRkcmVzcxgC",
          "IAEoBBIMCgRkYXRhGAMgASgMImIKHkRiZ1Byb3RlY3RQcm9jZXNzTWVtb3J5",
          "UmVxdWVzdBILCgNwaWQYASABKAUSDwoHYWRkcmVzcxgCIAEoBBIOCgZsZW5n",
          "dGgYAyABKAQSEgoKcHJvdGVjdGlvbhgEIAEoBSIdChtEYmdTY2FuUHJvY2Vz",
          "c01lbW9yeVJlcXVlc3QiJwoYRGJnR2V0UHJvY2Vzc0luZm9SZXF1ZXN0EgsK",
          "A3BpZBgBIAEoBSJKCh9EYmdBbGxvY2F0ZVByb2Nlc3NNZW1vcnlSZXF1ZXN0",
          "EgsKA3BpZBgBIAEoBRIMCgRzaXplGAIgASgNEgwKBHplcm8YAyABKAgiMwog",
          "RGJnQWxsb2NhdGVQcm9jZXNzTWVtb3J5UmVzcG9uc2USDwoHYWRkcmVzcxgB",
          "IAEoBCI7ChtEYmdGcmVlUHJvY2Vzc01lbW9yeVJlcXVlc3QSCwoDcGlkGAEg",
          "ASgFEg8KB2FkZHJlc3MYAiABKAQiJwoYRGJnR2V0UHJvY2Vzc01hcHNSZXF1",
          "ZXN0EgsKA3BpZBgBIAEoBSIfChBEYmdBdHRhY2hSZXF1ZXN0EgsKA3BpZBgB",
          "IAEoBSIhChBEYmdEZXRhY2hSZXF1ZXN0Eg0KBWZvcmNlGAEgASgIInYKFERi",
          "Z0JyZWFrcG9pbnRSZXF1ZXN0Eg8KB2VuYWJsZWQYASABKAgSDwoHYWRkcmVz",
          "cxgCIAEoBBIQCghvcmlnaW5hbBgDIAEoDRIqCg5icmVha3BvaW50VHlwZRgE",
          "IAEoDjISLkRiZ0JyZWFrcG9pbnRUeXBlIjEKFURiZ0JyZWFrcG9pbnRSZXNw",
          "b25zZRIYChBicmVha3BvaW50SGFuZGxlGAEgASgEImAKFERiZ1dhdGNocG9p",
          "bnRSZXF1ZXN0Eg8KB2VuYWJsZWQYASABKAgSDwoHYWRkcmVzcxgCIAEoBBIW",
          "Cg5icmVha3BvaW50VHlwZRgDIAEoDRIOCgZsZW5ndGgYBCABKA0iMQoVRGJn",
          "V2F0Y2hwb2ludFJlc3BvbnNlEhgKEHdhdGNocG9pbnRIYW5kbGUYASABKAQi",
          "KgobRGJnR2V0UHJvY2Vzc1RocmVhZHNSZXF1ZXN0EgsKA3BpZBgBIAEoBSJC",
          "ChxEYmdHZXRQcm9jZXNzVGhyZWFkc1Jlc3BvbnNlEiIKB3RocmVhZHMYASAD",
          "KAsyES5EYmdUaHJlYWRMaW1pdGVkIjYKF0RiZ1NpZ25hbFByb2Nlc3NSZXF1",
          "ZXN0EgsKA3BpZBgBIAEoBRIOCgZzaWduYWwYAiABKAUiNwoWRGJnR2V0UmVn",
          "aXN0ZXJzUmVxdWVzdBILCgNwaWQYASABKAUSEAoIdGhyZWFkSWQYAiABKAUi",
          "iwEKF0RiZ0dldFJlZ2lzdGVyc1Jlc3BvbnNlEiQKC2dwUmVnaXN0ZXJzGAEg",
          "ASgLMg8uRGJnR3BSZWdpc3RlcnMSJAoLZnBSZWdpc3RlcnMYAiABKAsyDy5E",
          "YmdGcFJlZ2lzdGVycxIkCgtkYlJlZ2lzdGVycxgDIAEoCzIPLkRiZ0RiUmVn",
          "aXN0ZXJzIqkBChZEYmdTZXRSZWdpc3RlcnNSZXF1ZXN0EgsKA3BpZBgBIAEo",
          "BRIQCgh0aHJlYWRJZBgCIAEoBRIkCgtncFJlZ2lzdGVycxgDIAEoCzIPLkRi",
          "Z0dwUmVnaXN0ZXJzEiQKC2ZwUmVnaXN0ZXJzGAQgASgLMg8uRGJnRnBSZWdp",
          "c3RlcnMSJAoLZGJSZWdpc3RlcnMYBSABKAsyDy5EYmdEYlJlZ2lzdGVycyI4",
          "ChdEYmdHZXRUaHJlYWRJbmZvUmVxdWVzdBILCgNwaWQYASABKAUSEAoIdGhy",
          "ZWFkSWQYAiABKAUiOwoaRGJnVGhyZWFkU2luZ2xlc3RlcFJlcXVlc3QSCwoD",
          "cGlkGAEgASgFEhAKCHRocmVhZElkGAIgASgFIkUKGERiZ0dldEtlcm5lbElu",
          "Zm9SZXNwb25zZRIPCgd2ZXJzaW9uGAEgASgEEhgKEGdsb2FibENvbmZpZ0Rh",
          "dGEYAiABKAwiOwoaRGJnUmVhZEtlcm5lbE1lbW9yeVJlcXVlc3QSDwoHYWRk",
          "cmVzcxgBIAEoBBIMCgRzaXplGAIgASgEIisKG0RiZ1dyaXRlS2VybmVsTWVt",
          "b3J5UmVxdWVzdBIMCgRkYXRhGAEgASgMIrABChFEYmdDb21tYW5kUmVxdWVz",
          "dBIvCgdjb21tYW5kGAEgASgOMh4uRGJnQ29tbWFuZFJlcXVlc3QuRGJnQ29t",
          "bWFuZHMiagoLRGJnQ29tbWFuZHMSDAoIREJHX05PTkUQABIOCgpEQkdfUkVC",
          "T09UEAESEAoMREJHX1NIVVRET1dOEAISDQoJREJHX1BSSU5UEAMSDgoKREJH",
          "X05PVElGWRAEEgwKCERCR19JTkZPEAUqQgoRRGJnQnJlYWtwb2ludFR5cGUS",
          "CwoHQlBfTk9ORRAAEg8KC0JQX1NPRlRXQVJFEAESDwoLQlBfSEFSRFdBUkUQ",
          "AmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DbgBreakpointType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGpRegisters), global::DbgGpRegisters.Parser, new[]{ "RR15", "RR14", "RR13", "RR12", "RR11", "RR10", "RR9", "RR8", "RRdi", "RRsi", "RRbp", "RRbx", "RRdx", "RRcx", "RRax", "RTrapno", "RFs", "RGs", "RErr", "REs", "RDs", "RRip", "RCs", "RRflags", "RRsp", "RSs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFpRegisters), global::DbgFpRegisters.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgDbRegisters), global::DbgDbRegisters.Parser, new[]{ "DebugRegs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgThreadLimited), global::DbgThreadLimited.Parser, new[]{ "Proc", "ThreadId", "Name", "Retval", "KernelStack", "KernelStackPages", "Errno" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgThreadFull), global::DbgThreadFull.Parser, new[]{ "Proc", "ThreadId", "Name", "Retval", "KernelStack", "KernelStackPages", "Errno", "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgCred), global::DbgCred.Parser, new[]{ "EffectiveUserId", "RealUserId", "SavedUserId", "NumGroups", "RealGroupId", "SavedGroupId", "Prison", "SceAuthId", "SceCaps", "SceAttr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFileDesc), global::DbgFileDesc.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProcessFull), global::DbgProcessFull.Parser, new[]{ "Threads", "Cred", "Pid", "ParentProc", "Oppid", "DbgChild", "Vmspace", "ExitThreads", "SigParent", "Sig", "Code", "Stops", "Stype", "SingleThread", "SuspendCount", "Dynlib", "Name", "ElfPath", "RandomizedPath", "NumThreads", "MapEntries" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgVmEntry), global::DbgVmEntry.Parser, new[]{ "Name", "Start", "End", "Offset", "Protection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProcessLimited), global::DbgProcessLimited.Parser, new[]{ "Pid", "Name", "Entries" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessListResponse), global::DbgGetProcessListResponse.Parser, new[]{ "Processes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadProcessMemoryRequest), global::DbgReadProcessMemoryRequest.Parser, new[]{ "Pid", "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadProcessMemoryResponse), global::DbgReadProcessMemoryResponse.Parser, new[]{ "BytesRead", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWriteProcessMemoryRequest), global::DbgWriteProcessMemoryRequest.Parser, new[]{ "Pid", "Address", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgProtectProcessMemoryRequest), global::DbgProtectProcessMemoryRequest.Parser, new[]{ "Pid", "Address", "Length", "Protection" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgScanProcessMemoryRequest), global::DbgScanProcessMemoryRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessInfoRequest), global::DbgGetProcessInfoRequest.Parser, new[]{ "Pid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAllocateProcessMemoryRequest), global::DbgAllocateProcessMemoryRequest.Parser, new[]{ "Pid", "Size", "Zero" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAllocateProcessMemoryResponse), global::DbgAllocateProcessMemoryResponse.Parser, new[]{ "Address" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgFreeProcessMemoryRequest), global::DbgFreeProcessMemoryRequest.Parser, new[]{ "Pid", "Address" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessMapsRequest), global::DbgGetProcessMapsRequest.Parser, new[]{ "Pid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgAttachRequest), global::DbgAttachRequest.Parser, new[]{ "Pid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgDetachRequest), global::DbgDetachRequest.Parser, new[]{ "Force" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgBreakpointRequest), global::DbgBreakpointRequest.Parser, new[]{ "Enabled", "Address", "Original", "BreakpointType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgBreakpointResponse), global::DbgBreakpointResponse.Parser, new[]{ "BreakpointHandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWatchpointRequest), global::DbgWatchpointRequest.Parser, new[]{ "Enabled", "Address", "BreakpointType", "Length" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWatchpointResponse), global::DbgWatchpointResponse.Parser, new[]{ "WatchpointHandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessThreadsRequest), global::DbgGetProcessThreadsRequest.Parser, new[]{ "Pid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetProcessThreadsResponse), global::DbgGetProcessThreadsResponse.Parser, new[]{ "Threads" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgSignalProcessRequest), global::DbgSignalProcessRequest.Parser, new[]{ "Pid", "Signal" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetRegistersRequest), global::DbgGetRegistersRequest.Parser, new[]{ "Pid", "ThreadId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetRegistersResponse), global::DbgGetRegistersResponse.Parser, new[]{ "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgSetRegistersRequest), global::DbgSetRegistersRequest.Parser, new[]{ "Pid", "ThreadId", "GpRegisters", "FpRegisters", "DbRegisters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetThreadInfoRequest), global::DbgGetThreadInfoRequest.Parser, new[]{ "Pid", "ThreadId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgThreadSinglestepRequest), global::DbgThreadSinglestepRequest.Parser, new[]{ "Pid", "ThreadId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgGetKernelInfoResponse), global::DbgGetKernelInfoResponse.Parser, new[]{ "Version", "GloablConfigData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgReadKernelMemoryRequest), global::DbgReadKernelMemoryRequest.Parser, new[]{ "Address", "Size" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgWriteKernelMemoryRequest), global::DbgWriteKernelMemoryRequest.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DbgCommandRequest), global::DbgCommandRequest.Parser, new[]{ "Command" }, null, new[]{ typeof(global::DbgCommandRequest.Types.DbgCommands) }, null)
        }));
  }
  #endregion

}
#region Enums
public enum DbgBreakpointType {
  [pbr::OriginalName("BP_NONE")] BpNone = 0,
  [pbr::OriginalName("BP_SOFTWARE")] BpSoftware = 1,
  [pbr::OriginalName("BP_HARDWARE")] BpHardware = 2,
}

#endregion

#region Messages
public sealed partial class DbgGpRegisters : pb::IMessage<DbgGpRegisters> {
  private static readonly pb::MessageParser<DbgGpRegisters> _parser = new pb::MessageParser<DbgGpRegisters>(() => new DbgGpRegisters());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGpRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters(DbgGpRegisters other) : this() {
    rR15_ = other.rR15_;
    rR14_ = other.rR14_;
    rR13_ = other.rR13_;
    rR12_ = other.rR12_;
    rR11_ = other.rR11_;
    rR10_ = other.rR10_;
    rR9_ = other.rR9_;
    rR8_ = other.rR8_;
    rRdi_ = other.rRdi_;
    rRsi_ = other.rRsi_;
    rRbp_ = other.rRbp_;
    rRbx_ = other.rRbx_;
    rRdx_ = other.rRdx_;
    rRcx_ = other.rRcx_;
    rRax_ = other.rRax_;
    rTrapno_ = other.rTrapno_;
    rFs_ = other.rFs_;
    rGs_ = other.rGs_;
    rErr_ = other.rErr_;
    rEs_ = other.rEs_;
    rDs_ = other.rDs_;
    rRip_ = other.rRip_;
    rCs_ = other.rCs_;
    rRflags_ = other.rRflags_;
    rRsp_ = other.rRsp_;
    rSs_ = other.rSs_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGpRegisters Clone() {
    return new DbgGpRegisters(this);
  }

  /// <summary>Field number for the "r_r15" field.</summary>
  public const int RR15FieldNumber = 1;
  private ulong rR15_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR15 {
    get { return rR15_; }
    set {
      rR15_ = value;
    }
  }

  /// <summary>Field number for the "r_r14" field.</summary>
  public const int RR14FieldNumber = 2;
  private ulong rR14_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR14 {
    get { return rR14_; }
    set {
      rR14_ = value;
    }
  }

  /// <summary>Field number for the "r_r13" field.</summary>
  public const int RR13FieldNumber = 3;
  private ulong rR13_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR13 {
    get { return rR13_; }
    set {
      rR13_ = value;
    }
  }

  /// <summary>Field number for the "r_r12" field.</summary>
  public const int RR12FieldNumber = 4;
  private ulong rR12_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR12 {
    get { return rR12_; }
    set {
      rR12_ = value;
    }
  }

  /// <summary>Field number for the "r_r11" field.</summary>
  public const int RR11FieldNumber = 5;
  private ulong rR11_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR11 {
    get { return rR11_; }
    set {
      rR11_ = value;
    }
  }

  /// <summary>Field number for the "r_r10" field.</summary>
  public const int RR10FieldNumber = 6;
  private ulong rR10_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR10 {
    get { return rR10_; }
    set {
      rR10_ = value;
    }
  }

  /// <summary>Field number for the "r_r9" field.</summary>
  public const int RR9FieldNumber = 7;
  private ulong rR9_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR9 {
    get { return rR9_; }
    set {
      rR9_ = value;
    }
  }

  /// <summary>Field number for the "r_r8" field.</summary>
  public const int RR8FieldNumber = 8;
  private ulong rR8_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RR8 {
    get { return rR8_; }
    set {
      rR8_ = value;
    }
  }

  /// <summary>Field number for the "r_rdi" field.</summary>
  public const int RRdiFieldNumber = 9;
  private ulong rRdi_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRdi {
    get { return rRdi_; }
    set {
      rRdi_ = value;
    }
  }

  /// <summary>Field number for the "r_rsi" field.</summary>
  public const int RRsiFieldNumber = 10;
  private ulong rRsi_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRsi {
    get { return rRsi_; }
    set {
      rRsi_ = value;
    }
  }

  /// <summary>Field number for the "r_rbp" field.</summary>
  public const int RRbpFieldNumber = 11;
  private ulong rRbp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRbp {
    get { return rRbp_; }
    set {
      rRbp_ = value;
    }
  }

  /// <summary>Field number for the "r_rbx" field.</summary>
  public const int RRbxFieldNumber = 12;
  private ulong rRbx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRbx {
    get { return rRbx_; }
    set {
      rRbx_ = value;
    }
  }

  /// <summary>Field number for the "r_rdx" field.</summary>
  public const int RRdxFieldNumber = 13;
  private ulong rRdx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRdx {
    get { return rRdx_; }
    set {
      rRdx_ = value;
    }
  }

  /// <summary>Field number for the "r_rcx" field.</summary>
  public const int RRcxFieldNumber = 14;
  private ulong rRcx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRcx {
    get { return rRcx_; }
    set {
      rRcx_ = value;
    }
  }

  /// <summary>Field number for the "r_rax" field.</summary>
  public const int RRaxFieldNumber = 15;
  private ulong rRax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRax {
    get { return rRax_; }
    set {
      rRax_ = value;
    }
  }

  /// <summary>Field number for the "r_trapno" field.</summary>
  public const int RTrapnoFieldNumber = 16;
  private uint rTrapno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RTrapno {
    get { return rTrapno_; }
    set {
      rTrapno_ = value;
    }
  }

  /// <summary>Field number for the "r_fs" field.</summary>
  public const int RFsFieldNumber = 17;
  private uint rFs_;
  /// <summary>
  /// uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RFs {
    get { return rFs_; }
    set {
      rFs_ = value;
    }
  }

  /// <summary>Field number for the "r_gs" field.</summary>
  public const int RGsFieldNumber = 18;
  private uint rGs_;
  /// <summary>
  /// uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RGs {
    get { return rGs_; }
    set {
      rGs_ = value;
    }
  }

  /// <summary>Field number for the "r_err" field.</summary>
  public const int RErrFieldNumber = 19;
  private uint rErr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RErr {
    get { return rErr_; }
    set {
      rErr_ = value;
    }
  }

  /// <summary>Field number for the "r_es" field.</summary>
  public const int REsFieldNumber = 20;
  private uint rEs_;
  /// <summary>
  /// uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint REs {
    get { return rEs_; }
    set {
      rEs_ = value;
    }
  }

  /// <summary>Field number for the "r_ds" field.</summary>
  public const int RDsFieldNumber = 21;
  private uint rDs_;
  /// <summary>
  /// uint16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RDs {
    get { return rDs_; }
    set {
      rDs_ = value;
    }
  }

  /// <summary>Field number for the "r_rip" field.</summary>
  public const int RRipFieldNumber = 22;
  private ulong rRip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRip {
    get { return rRip_; }
    set {
      rRip_ = value;
    }
  }

  /// <summary>Field number for the "r_cs" field.</summary>
  public const int RCsFieldNumber = 23;
  private ulong rCs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RCs {
    get { return rCs_; }
    set {
      rCs_ = value;
    }
  }

  /// <summary>Field number for the "r_rflags" field.</summary>
  public const int RRflagsFieldNumber = 24;
  private ulong rRflags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRflags {
    get { return rRflags_; }
    set {
      rRflags_ = value;
    }
  }

  /// <summary>Field number for the "r_rsp" field.</summary>
  public const int RRspFieldNumber = 25;
  private ulong rRsp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RRsp {
    get { return rRsp_; }
    set {
      rRsp_ = value;
    }
  }

  /// <summary>Field number for the "r_ss" field.</summary>
  public const int RSsFieldNumber = 26;
  private ulong rSs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RSs {
    get { return rSs_; }
    set {
      rSs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGpRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGpRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RR15 != other.RR15) return false;
    if (RR14 != other.RR14) return false;
    if (RR13 != other.RR13) return false;
    if (RR12 != other.RR12) return false;
    if (RR11 != other.RR11) return false;
    if (RR10 != other.RR10) return false;
    if (RR9 != other.RR9) return false;
    if (RR8 != other.RR8) return false;
    if (RRdi != other.RRdi) return false;
    if (RRsi != other.RRsi) return false;
    if (RRbp != other.RRbp) return false;
    if (RRbx != other.RRbx) return false;
    if (RRdx != other.RRdx) return false;
    if (RRcx != other.RRcx) return false;
    if (RRax != other.RRax) return false;
    if (RTrapno != other.RTrapno) return false;
    if (RFs != other.RFs) return false;
    if (RGs != other.RGs) return false;
    if (RErr != other.RErr) return false;
    if (REs != other.REs) return false;
    if (RDs != other.RDs) return false;
    if (RRip != other.RRip) return false;
    if (RCs != other.RCs) return false;
    if (RRflags != other.RRflags) return false;
    if (RRsp != other.RRsp) return false;
    if (RSs != other.RSs) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RR15 != 0UL) hash ^= RR15.GetHashCode();
    if (RR14 != 0UL) hash ^= RR14.GetHashCode();
    if (RR13 != 0UL) hash ^= RR13.GetHashCode();
    if (RR12 != 0UL) hash ^= RR12.GetHashCode();
    if (RR11 != 0UL) hash ^= RR11.GetHashCode();
    if (RR10 != 0UL) hash ^= RR10.GetHashCode();
    if (RR9 != 0UL) hash ^= RR9.GetHashCode();
    if (RR8 != 0UL) hash ^= RR8.GetHashCode();
    if (RRdi != 0UL) hash ^= RRdi.GetHashCode();
    if (RRsi != 0UL) hash ^= RRsi.GetHashCode();
    if (RRbp != 0UL) hash ^= RRbp.GetHashCode();
    if (RRbx != 0UL) hash ^= RRbx.GetHashCode();
    if (RRdx != 0UL) hash ^= RRdx.GetHashCode();
    if (RRcx != 0UL) hash ^= RRcx.GetHashCode();
    if (RRax != 0UL) hash ^= RRax.GetHashCode();
    if (RTrapno != 0) hash ^= RTrapno.GetHashCode();
    if (RFs != 0) hash ^= RFs.GetHashCode();
    if (RGs != 0) hash ^= RGs.GetHashCode();
    if (RErr != 0) hash ^= RErr.GetHashCode();
    if (REs != 0) hash ^= REs.GetHashCode();
    if (RDs != 0) hash ^= RDs.GetHashCode();
    if (RRip != 0UL) hash ^= RRip.GetHashCode();
    if (RCs != 0UL) hash ^= RCs.GetHashCode();
    if (RRflags != 0UL) hash ^= RRflags.GetHashCode();
    if (RRsp != 0UL) hash ^= RRsp.GetHashCode();
    if (RSs != 0UL) hash ^= RSs.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RR15 != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RR15);
    }
    if (RR14 != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RR14);
    }
    if (RR13 != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RR13);
    }
    if (RR12 != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(RR12);
    }
    if (RR11 != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(RR11);
    }
    if (RR10 != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(RR10);
    }
    if (RR9 != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(RR9);
    }
    if (RR8 != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(RR8);
    }
    if (RRdi != 0UL) {
      output.WriteRawTag(72);
      output.WriteUInt64(RRdi);
    }
    if (RRsi != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(RRsi);
    }
    if (RRbp != 0UL) {
      output.WriteRawTag(88);
      output.WriteUInt64(RRbp);
    }
    if (RRbx != 0UL) {
      output.WriteRawTag(96);
      output.WriteUInt64(RRbx);
    }
    if (RRdx != 0UL) {
      output.WriteRawTag(104);
      output.WriteUInt64(RRdx);
    }
    if (RRcx != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(RRcx);
    }
    if (RRax != 0UL) {
      output.WriteRawTag(120);
      output.WriteUInt64(RRax);
    }
    if (RTrapno != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(RTrapno);
    }
    if (RFs != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(RFs);
    }
    if (RGs != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(RGs);
    }
    if (RErr != 0) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(RErr);
    }
    if (REs != 0) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(REs);
    }
    if (RDs != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(RDs);
    }
    if (RRip != 0UL) {
      output.WriteRawTag(176, 1);
      output.WriteUInt64(RRip);
    }
    if (RCs != 0UL) {
      output.WriteRawTag(184, 1);
      output.WriteUInt64(RCs);
    }
    if (RRflags != 0UL) {
      output.WriteRawTag(192, 1);
      output.WriteUInt64(RRflags);
    }
    if (RRsp != 0UL) {
      output.WriteRawTag(200, 1);
      output.WriteUInt64(RRsp);
    }
    if (RSs != 0UL) {
      output.WriteRawTag(208, 1);
      output.WriteUInt64(RSs);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RR15 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR15);
    }
    if (RR14 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR14);
    }
    if (RR13 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR13);
    }
    if (RR12 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR12);
    }
    if (RR11 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR11);
    }
    if (RR10 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR10);
    }
    if (RR9 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR9);
    }
    if (RR8 != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RR8);
    }
    if (RRdi != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRdi);
    }
    if (RRsi != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRsi);
    }
    if (RRbp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRbp);
    }
    if (RRbx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRbx);
    }
    if (RRdx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRdx);
    }
    if (RRcx != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRcx);
    }
    if (RRax != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RRax);
    }
    if (RTrapno != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RTrapno);
    }
    if (RFs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RFs);
    }
    if (RGs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RGs);
    }
    if (RErr != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RErr);
    }
    if (REs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(REs);
    }
    if (RDs != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RDs);
    }
    if (RRip != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRip);
    }
    if (RCs != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RCs);
    }
    if (RRflags != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRflags);
    }
    if (RRsp != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RRsp);
    }
    if (RSs != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RSs);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGpRegisters other) {
    if (other == null) {
      return;
    }
    if (other.RR15 != 0UL) {
      RR15 = other.RR15;
    }
    if (other.RR14 != 0UL) {
      RR14 = other.RR14;
    }
    if (other.RR13 != 0UL) {
      RR13 = other.RR13;
    }
    if (other.RR12 != 0UL) {
      RR12 = other.RR12;
    }
    if (other.RR11 != 0UL) {
      RR11 = other.RR11;
    }
    if (other.RR10 != 0UL) {
      RR10 = other.RR10;
    }
    if (other.RR9 != 0UL) {
      RR9 = other.RR9;
    }
    if (other.RR8 != 0UL) {
      RR8 = other.RR8;
    }
    if (other.RRdi != 0UL) {
      RRdi = other.RRdi;
    }
    if (other.RRsi != 0UL) {
      RRsi = other.RRsi;
    }
    if (other.RRbp != 0UL) {
      RRbp = other.RRbp;
    }
    if (other.RRbx != 0UL) {
      RRbx = other.RRbx;
    }
    if (other.RRdx != 0UL) {
      RRdx = other.RRdx;
    }
    if (other.RRcx != 0UL) {
      RRcx = other.RRcx;
    }
    if (other.RRax != 0UL) {
      RRax = other.RRax;
    }
    if (other.RTrapno != 0) {
      RTrapno = other.RTrapno;
    }
    if (other.RFs != 0) {
      RFs = other.RFs;
    }
    if (other.RGs != 0) {
      RGs = other.RGs;
    }
    if (other.RErr != 0) {
      RErr = other.RErr;
    }
    if (other.REs != 0) {
      REs = other.REs;
    }
    if (other.RDs != 0) {
      RDs = other.RDs;
    }
    if (other.RRip != 0UL) {
      RRip = other.RRip;
    }
    if (other.RCs != 0UL) {
      RCs = other.RCs;
    }
    if (other.RRflags != 0UL) {
      RRflags = other.RRflags;
    }
    if (other.RRsp != 0UL) {
      RRsp = other.RRsp;
    }
    if (other.RSs != 0UL) {
      RSs = other.RSs;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RR15 = input.ReadUInt64();
          break;
        }
        case 16: {
          RR14 = input.ReadUInt64();
          break;
        }
        case 24: {
          RR13 = input.ReadUInt64();
          break;
        }
        case 32: {
          RR12 = input.ReadUInt64();
          break;
        }
        case 40: {
          RR11 = input.ReadUInt64();
          break;
        }
        case 48: {
          RR10 = input.ReadUInt64();
          break;
        }
        case 56: {
          RR9 = input.ReadUInt64();
          break;
        }
        case 64: {
          RR8 = input.ReadUInt64();
          break;
        }
        case 72: {
          RRdi = input.ReadUInt64();
          break;
        }
        case 80: {
          RRsi = input.ReadUInt64();
          break;
        }
        case 88: {
          RRbp = input.ReadUInt64();
          break;
        }
        case 96: {
          RRbx = input.ReadUInt64();
          break;
        }
        case 104: {
          RRdx = input.ReadUInt64();
          break;
        }
        case 112: {
          RRcx = input.ReadUInt64();
          break;
        }
        case 120: {
          RRax = input.ReadUInt64();
          break;
        }
        case 128: {
          RTrapno = input.ReadUInt32();
          break;
        }
        case 136: {
          RFs = input.ReadUInt32();
          break;
        }
        case 144: {
          RGs = input.ReadUInt32();
          break;
        }
        case 152: {
          RErr = input.ReadUInt32();
          break;
        }
        case 160: {
          REs = input.ReadUInt32();
          break;
        }
        case 168: {
          RDs = input.ReadUInt32();
          break;
        }
        case 176: {
          RRip = input.ReadUInt64();
          break;
        }
        case 184: {
          RCs = input.ReadUInt64();
          break;
        }
        case 192: {
          RRflags = input.ReadUInt64();
          break;
        }
        case 200: {
          RRsp = input.ReadUInt64();
          break;
        }
        case 208: {
          RSs = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFpRegisters : pb::IMessage<DbgFpRegisters> {
  private static readonly pb::MessageParser<DbgFpRegisters> _parser = new pb::MessageParser<DbgFpRegisters>(() => new DbgFpRegisters());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFpRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters(DbgFpRegisters other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFpRegisters Clone() {
    return new DbgFpRegisters(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  /// I really don't feel like dealing with this
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFpRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFpRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFpRegisters other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgDbRegisters : pb::IMessage<DbgDbRegisters> {
  private static readonly pb::MessageParser<DbgDbRegisters> _parser = new pb::MessageParser<DbgDbRegisters>(() => new DbgDbRegisters());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgDbRegisters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters(DbgDbRegisters other) : this() {
    debugRegs_ = other.debugRegs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDbRegisters Clone() {
    return new DbgDbRegisters(this);
  }

  /// <summary>Field number for the "debugRegs" field.</summary>
  public const int DebugRegsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_debugRegs_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> debugRegs_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// len 16
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DebugRegs {
    get { return debugRegs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgDbRegisters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgDbRegisters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!debugRegs_.Equals(other.debugRegs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= debugRegs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    debugRegs_.WriteTo(output, _repeated_debugRegs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += debugRegs_.CalculateSize(_repeated_debugRegs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgDbRegisters other) {
    if (other == null) {
      return;
    }
    debugRegs_.Add(other.debugRegs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          debugRegs_.AddEntriesFrom(input, _repeated_debugRegs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgThreadLimited : pb::IMessage<DbgThreadLimited> {
  private static readonly pb::MessageParser<DbgThreadLimited> _parser = new pb::MessageParser<DbgThreadLimited>(() => new DbgThreadLimited());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgThreadLimited> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited(DbgThreadLimited other) : this() {
    proc_ = other.proc_;
    threadId_ = other.threadId_;
    name_ = other.name_;
    retval_ = other.retval_;
    kernelStack_ = other.kernelStack_;
    kernelStackPages_ = other.kernelStackPages_;
    errno_ = other.errno_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadLimited Clone() {
    return new DbgThreadLimited(this);
  }

  /// <summary>Field number for the "proc" field.</summary>
  public const int ProcFieldNumber = 1;
  private ulong proc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Proc {
    get { return proc_; }
    set {
      proc_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "retval" field.</summary>
  public const int RetvalFieldNumber = 4;
  private long retval_;
  /// <summary>
  /// len 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Retval {
    get { return retval_; }
    set {
      retval_ = value;
    }
  }

  /// <summary>Field number for the "kernelStack" field.</summary>
  public const int KernelStackFieldNumber = 5;
  private ulong kernelStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong KernelStack {
    get { return kernelStack_; }
    set {
      kernelStack_ = value;
    }
  }

  /// <summary>Field number for the "kernelStackPages" field.</summary>
  public const int KernelStackPagesFieldNumber = 6;
  private int kernelStackPages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelStackPages {
    get { return kernelStackPages_; }
    set {
      kernelStackPages_ = value;
    }
  }

  /// <summary>Field number for the "errno" field.</summary>
  public const int ErrnoFieldNumber = 7;
  private int errno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Errno {
    get { return errno_; }
    set {
      errno_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgThreadLimited);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgThreadLimited other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Proc != other.Proc) return false;
    if (ThreadId != other.ThreadId) return false;
    if (Name != other.Name) return false;
    if (Retval != other.Retval) return false;
    if (KernelStack != other.KernelStack) return false;
    if (KernelStackPages != other.KernelStackPages) return false;
    if (Errno != other.Errno) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Proc != 0UL) hash ^= Proc.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Retval != 0L) hash ^= Retval.GetHashCode();
    if (KernelStack != 0UL) hash ^= KernelStack.GetHashCode();
    if (KernelStackPages != 0) hash ^= KernelStackPages.GetHashCode();
    if (Errno != 0) hash ^= Errno.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Proc != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Proc);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Retval != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Retval);
    }
    if (KernelStack != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(KernelStack);
    }
    if (KernelStackPages != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(KernelStackPages);
    }
    if (Errno != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Errno);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Proc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Proc);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Retval != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Retval);
    }
    if (KernelStack != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KernelStack);
    }
    if (KernelStackPages != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelStackPages);
    }
    if (Errno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgThreadLimited other) {
    if (other == null) {
      return;
    }
    if (other.Proc != 0UL) {
      Proc = other.Proc;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Retval != 0L) {
      Retval = other.Retval;
    }
    if (other.KernelStack != 0UL) {
      KernelStack = other.KernelStack;
    }
    if (other.KernelStackPages != 0) {
      KernelStackPages = other.KernelStackPages;
    }
    if (other.Errno != 0) {
      Errno = other.Errno;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Proc = input.ReadUInt64();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Retval = input.ReadInt64();
          break;
        }
        case 40: {
          KernelStack = input.ReadUInt64();
          break;
        }
        case 48: {
          KernelStackPages = input.ReadInt32();
          break;
        }
        case 56: {
          Errno = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgThreadFull : pb::IMessage<DbgThreadFull> {
  private static readonly pb::MessageParser<DbgThreadFull> _parser = new pb::MessageParser<DbgThreadFull>(() => new DbgThreadFull());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgThreadFull> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull(DbgThreadFull other) : this() {
    proc_ = other.proc_;
    threadId_ = other.threadId_;
    name_ = other.name_;
    retval_ = other.retval_;
    kernelStack_ = other.kernelStack_;
    kernelStackPages_ = other.kernelStackPages_;
    errno_ = other.errno_;
    gpRegisters_ = other.gpRegisters_ != null ? other.gpRegisters_.Clone() : null;
    fpRegisters_ = other.fpRegisters_ != null ? other.fpRegisters_.Clone() : null;
    dbRegisters_ = other.dbRegisters_ != null ? other.dbRegisters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadFull Clone() {
    return new DbgThreadFull(this);
  }

  /// <summary>Field number for the "proc" field.</summary>
  public const int ProcFieldNumber = 1;
  private ulong proc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Proc {
    get { return proc_; }
    set {
      proc_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "retval" field.</summary>
  public const int RetvalFieldNumber = 4;
  private long retval_;
  /// <summary>
  /// len 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Retval {
    get { return retval_; }
    set {
      retval_ = value;
    }
  }

  /// <summary>Field number for the "kernelStack" field.</summary>
  public const int KernelStackFieldNumber = 5;
  private ulong kernelStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong KernelStack {
    get { return kernelStack_; }
    set {
      kernelStack_ = value;
    }
  }

  /// <summary>Field number for the "kernelStackPages" field.</summary>
  public const int KernelStackPagesFieldNumber = 6;
  private int kernelStackPages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KernelStackPages {
    get { return kernelStackPages_; }
    set {
      kernelStackPages_ = value;
    }
  }

  /// <summary>Field number for the "errno" field.</summary>
  public const int ErrnoFieldNumber = 7;
  private int errno_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Errno {
    get { return errno_; }
    set {
      errno_ = value;
    }
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 8;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 9;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 10;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgThreadFull);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgThreadFull other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Proc != other.Proc) return false;
    if (ThreadId != other.ThreadId) return false;
    if (Name != other.Name) return false;
    if (Retval != other.Retval) return false;
    if (KernelStack != other.KernelStack) return false;
    if (KernelStackPages != other.KernelStackPages) return false;
    if (Errno != other.Errno) return false;
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Proc != 0UL) hash ^= Proc.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Retval != 0L) hash ^= Retval.GetHashCode();
    if (KernelStack != 0UL) hash ^= KernelStack.GetHashCode();
    if (KernelStackPages != 0) hash ^= KernelStackPages.GetHashCode();
    if (Errno != 0) hash ^= Errno.GetHashCode();
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Proc != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Proc);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Retval != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Retval);
    }
    if (KernelStack != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(KernelStack);
    }
    if (KernelStackPages != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(KernelStackPages);
    }
    if (Errno != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Errno);
    }
    if (gpRegisters_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(DbRegisters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Proc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Proc);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Retval != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Retval);
    }
    if (KernelStack != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KernelStack);
    }
    if (KernelStackPages != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelStackPages);
    }
    if (Errno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errno);
    }
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgThreadFull other) {
    if (other == null) {
      return;
    }
    if (other.Proc != 0UL) {
      Proc = other.Proc;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Retval != 0L) {
      Retval = other.Retval;
    }
    if (other.KernelStack != 0UL) {
      KernelStack = other.KernelStack;
    }
    if (other.KernelStackPages != 0) {
      KernelStackPages = other.KernelStackPages;
    }
    if (other.Errno != 0) {
      Errno = other.Errno;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        GpRegisters = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        FpRegisters = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        DbRegisters = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Proc = input.ReadUInt64();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Retval = input.ReadInt64();
          break;
        }
        case 40: {
          KernelStack = input.ReadUInt64();
          break;
        }
        case 48: {
          KernelStackPages = input.ReadInt32();
          break;
        }
        case 56: {
          Errno = input.ReadInt32();
          break;
        }
        case 66: {
          if (gpRegisters_ == null) {
            GpRegisters = new global::DbgGpRegisters();
          }
          input.ReadMessage(GpRegisters);
          break;
        }
        case 74: {
          if (fpRegisters_ == null) {
            FpRegisters = new global::DbgFpRegisters();
          }
          input.ReadMessage(FpRegisters);
          break;
        }
        case 82: {
          if (dbRegisters_ == null) {
            DbRegisters = new global::DbgDbRegisters();
          }
          input.ReadMessage(DbRegisters);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgCred : pb::IMessage<DbgCred> {
  private static readonly pb::MessageParser<DbgCred> _parser = new pb::MessageParser<DbgCred>(() => new DbgCred());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgCred> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred(DbgCred other) : this() {
    effectiveUserId_ = other.effectiveUserId_;
    realUserId_ = other.realUserId_;
    savedUserId_ = other.savedUserId_;
    numGroups_ = other.numGroups_;
    realGroupId_ = other.realGroupId_;
    savedGroupId_ = other.savedGroupId_;
    prison_ = other.prison_;
    sceAuthId_ = other.sceAuthId_;
    sceCaps_ = other.sceCaps_.Clone();
    sceAttr_ = other.sceAttr_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCred Clone() {
    return new DbgCred(this);
  }

  /// <summary>Field number for the "effectiveUserId" field.</summary>
  public const int EffectiveUserIdFieldNumber = 1;
  private uint effectiveUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EffectiveUserId {
    get { return effectiveUserId_; }
    set {
      effectiveUserId_ = value;
    }
  }

  /// <summary>Field number for the "realUserId" field.</summary>
  public const int RealUserIdFieldNumber = 2;
  private uint realUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RealUserId {
    get { return realUserId_; }
    set {
      realUserId_ = value;
    }
  }

  /// <summary>Field number for the "savedUserId" field.</summary>
  public const int SavedUserIdFieldNumber = 3;
  private uint savedUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SavedUserId {
    get { return savedUserId_; }
    set {
      savedUserId_ = value;
    }
  }

  /// <summary>Field number for the "numGroups" field.</summary>
  public const int NumGroupsFieldNumber = 4;
  private int numGroups_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumGroups {
    get { return numGroups_; }
    set {
      numGroups_ = value;
    }
  }

  /// <summary>Field number for the "realGroupId" field.</summary>
  public const int RealGroupIdFieldNumber = 5;
  private uint realGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RealGroupId {
    get { return realGroupId_; }
    set {
      realGroupId_ = value;
    }
  }

  /// <summary>Field number for the "savedGroupId" field.</summary>
  public const int SavedGroupIdFieldNumber = 6;
  private uint savedGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SavedGroupId {
    get { return savedGroupId_; }
    set {
      savedGroupId_ = value;
    }
  }

  /// <summary>Field number for the "prison" field.</summary>
  public const int PrisonFieldNumber = 7;
  private ulong prison_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Prison {
    get { return prison_; }
    set {
      prison_ = value;
    }
  }

  /// <summary>Field number for the "sceAuthId" field.</summary>
  public const int SceAuthIdFieldNumber = 8;
  private ulong sceAuthId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SceAuthId {
    get { return sceAuthId_; }
    set {
      sceAuthId_ = value;
    }
  }

  /// <summary>Field number for the "sceCaps" field.</summary>
  public const int SceCapsFieldNumber = 9;
  private static readonly pb::FieldCodec<ulong> _repeated_sceCaps_codec
      = pb::FieldCodec.ForUInt64(74);
  private readonly pbc::RepeatedField<ulong> sceCaps_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  /// len 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> SceCaps {
    get { return sceCaps_; }
  }

  /// <summary>Field number for the "sceAttr" field.</summary>
  public const int SceAttrFieldNumber = 10;
  private static readonly pb::FieldCodec<ulong> _repeated_sceAttr_codec
      = pb::FieldCodec.ForUInt64(82);
  private readonly pbc::RepeatedField<ulong> sceAttr_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  /// len 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> SceAttr {
    get { return sceAttr_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgCred);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgCred other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EffectiveUserId != other.EffectiveUserId) return false;
    if (RealUserId != other.RealUserId) return false;
    if (SavedUserId != other.SavedUserId) return false;
    if (NumGroups != other.NumGroups) return false;
    if (RealGroupId != other.RealGroupId) return false;
    if (SavedGroupId != other.SavedGroupId) return false;
    if (Prison != other.Prison) return false;
    if (SceAuthId != other.SceAuthId) return false;
    if(!sceCaps_.Equals(other.sceCaps_)) return false;
    if(!sceAttr_.Equals(other.sceAttr_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EffectiveUserId != 0) hash ^= EffectiveUserId.GetHashCode();
    if (RealUserId != 0) hash ^= RealUserId.GetHashCode();
    if (SavedUserId != 0) hash ^= SavedUserId.GetHashCode();
    if (NumGroups != 0) hash ^= NumGroups.GetHashCode();
    if (RealGroupId != 0) hash ^= RealGroupId.GetHashCode();
    if (SavedGroupId != 0) hash ^= SavedGroupId.GetHashCode();
    if (Prison != 0UL) hash ^= Prison.GetHashCode();
    if (SceAuthId != 0UL) hash ^= SceAuthId.GetHashCode();
    hash ^= sceCaps_.GetHashCode();
    hash ^= sceAttr_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EffectiveUserId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(EffectiveUserId);
    }
    if (RealUserId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RealUserId);
    }
    if (SavedUserId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SavedUserId);
    }
    if (NumGroups != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NumGroups);
    }
    if (RealGroupId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(RealGroupId);
    }
    if (SavedGroupId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(SavedGroupId);
    }
    if (Prison != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Prison);
    }
    if (SceAuthId != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(SceAuthId);
    }
    sceCaps_.WriteTo(output, _repeated_sceCaps_codec);
    sceAttr_.WriteTo(output, _repeated_sceAttr_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EffectiveUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveUserId);
    }
    if (RealUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RealUserId);
    }
    if (SavedUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SavedUserId);
    }
    if (NumGroups != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumGroups);
    }
    if (RealGroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RealGroupId);
    }
    if (SavedGroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SavedGroupId);
    }
    if (Prison != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Prison);
    }
    if (SceAuthId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SceAuthId);
    }
    size += sceCaps_.CalculateSize(_repeated_sceCaps_codec);
    size += sceAttr_.CalculateSize(_repeated_sceAttr_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgCred other) {
    if (other == null) {
      return;
    }
    if (other.EffectiveUserId != 0) {
      EffectiveUserId = other.EffectiveUserId;
    }
    if (other.RealUserId != 0) {
      RealUserId = other.RealUserId;
    }
    if (other.SavedUserId != 0) {
      SavedUserId = other.SavedUserId;
    }
    if (other.NumGroups != 0) {
      NumGroups = other.NumGroups;
    }
    if (other.RealGroupId != 0) {
      RealGroupId = other.RealGroupId;
    }
    if (other.SavedGroupId != 0) {
      SavedGroupId = other.SavedGroupId;
    }
    if (other.Prison != 0UL) {
      Prison = other.Prison;
    }
    if (other.SceAuthId != 0UL) {
      SceAuthId = other.SceAuthId;
    }
    sceCaps_.Add(other.sceCaps_);
    sceAttr_.Add(other.sceAttr_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EffectiveUserId = input.ReadUInt32();
          break;
        }
        case 16: {
          RealUserId = input.ReadUInt32();
          break;
        }
        case 24: {
          SavedUserId = input.ReadUInt32();
          break;
        }
        case 32: {
          NumGroups = input.ReadInt32();
          break;
        }
        case 40: {
          RealGroupId = input.ReadUInt32();
          break;
        }
        case 48: {
          SavedGroupId = input.ReadUInt32();
          break;
        }
        case 56: {
          Prison = input.ReadUInt64();
          break;
        }
        case 64: {
          SceAuthId = input.ReadUInt64();
          break;
        }
        case 74:
        case 72: {
          sceCaps_.AddEntriesFrom(input, _repeated_sceCaps_codec);
          break;
        }
        case 82:
        case 80: {
          sceAttr_.AddEntriesFrom(input, _repeated_sceAttr_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFileDesc : pb::IMessage<DbgFileDesc> {
  private static readonly pb::MessageParser<DbgFileDesc> _parser = new pb::MessageParser<DbgFileDesc>(() => new DbgFileDesc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFileDesc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc(DbgFileDesc other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFileDesc Clone() {
    return new DbgFileDesc(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFileDesc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFileDesc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFileDesc other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class DbgProcessFull : pb::IMessage<DbgProcessFull> {
  private static readonly pb::MessageParser<DbgProcessFull> _parser = new pb::MessageParser<DbgProcessFull>(() => new DbgProcessFull());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProcessFull> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull(DbgProcessFull other) : this() {
    threads_ = other.threads_.Clone();
    cred_ = other.cred_ != null ? other.cred_.Clone() : null;
    pid_ = other.pid_;
    parentProc_ = other.parentProc_;
    oppid_ = other.oppid_;
    dbgChild_ = other.dbgChild_;
    vmspace_ = other.vmspace_;
    exitThreads_ = other.exitThreads_;
    sigParent_ = other.sigParent_;
    sig_ = other.sig_;
    code_ = other.code_;
    stops_ = other.stops_;
    stype_ = other.stype_;
    singleThread_ = other.singleThread_;
    suspendCount_ = other.suspendCount_;
    dynlib_ = other.dynlib_;
    name_ = other.name_;
    elfPath_ = other.elfPath_;
    randomizedPath_ = other.randomizedPath_;
    numThreads_ = other.numThreads_;
    mapEntries_ = other.mapEntries_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessFull Clone() {
    return new DbgProcessFull(this);
  }

  /// <summary>Field number for the "threads" field.</summary>
  public const int ThreadsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgThreadLimited> _repeated_threads_codec
      = pb::FieldCodec.ForMessage(10, global::DbgThreadLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgThreadLimited> threads_ = new pbc::RepeatedField<global::DbgThreadLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgThreadLimited> Threads {
    get { return threads_; }
  }

  /// <summary>Field number for the "cred" field.</summary>
  public const int CredFieldNumber = 2;
  private global::DbgCred cred_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgCred Cred {
    get { return cred_; }
    set {
      cred_ = value;
    }
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 3;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "parentProc" field.</summary>
  public const int ParentProcFieldNumber = 4;
  private ulong parentProc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ParentProc {
    get { return parentProc_; }
    set {
      parentProc_ = value;
    }
  }

  /// <summary>Field number for the "oppid" field.</summary>
  public const int OppidFieldNumber = 5;
  private int oppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oppid {
    get { return oppid_; }
    set {
      oppid_ = value;
    }
  }

  /// <summary>Field number for the "dbgChild" field.</summary>
  public const int DbgChildFieldNumber = 6;
  private int dbgChild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DbgChild {
    get { return dbgChild_; }
    set {
      dbgChild_ = value;
    }
  }

  /// <summary>Field number for the "vmspace" field.</summary>
  public const int VmspaceFieldNumber = 7;
  private ulong vmspace_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Vmspace {
    get { return vmspace_; }
    set {
      vmspace_ = value;
    }
  }

  /// <summary>Field number for the "exitThreads" field.</summary>
  public const int ExitThreadsFieldNumber = 8;
  private int exitThreads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ExitThreads {
    get { return exitThreads_; }
    set {
      exitThreads_ = value;
    }
  }

  /// <summary>Field number for the "sigParent" field.</summary>
  public const int SigParentFieldNumber = 9;
  private int sigParent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SigParent {
    get { return sigParent_; }
    set {
      sigParent_ = value;
    }
  }

  /// <summary>Field number for the "sig" field.</summary>
  public const int SigFieldNumber = 10;
  private int sig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sig {
    get { return sig_; }
    set {
      sig_ = value;
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 11;
  private uint code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "stops" field.</summary>
  public const int StopsFieldNumber = 12;
  private uint stops_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Stops {
    get { return stops_; }
    set {
      stops_ = value;
    }
  }

  /// <summary>Field number for the "stype" field.</summary>
  public const int StypeFieldNumber = 13;
  private uint stype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Stype {
    get { return stype_; }
    set {
      stype_ = value;
    }
  }

  /// <summary>Field number for the "singleThread" field.</summary>
  public const int SingleThreadFieldNumber = 14;
  private ulong singleThread_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SingleThread {
    get { return singleThread_; }
    set {
      singleThread_ = value;
    }
  }

  /// <summary>Field number for the "suspendCount" field.</summary>
  public const int SuspendCountFieldNumber = 15;
  private int suspendCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SuspendCount {
    get { return suspendCount_; }
    set {
      suspendCount_ = value;
    }
  }

  /// <summary>Field number for the "dynlib" field.</summary>
  public const int DynlibFieldNumber = 16;
  private ulong dynlib_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Dynlib {
    get { return dynlib_; }
    set {
      dynlib_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 17;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "elfPath" field.</summary>
  public const int ElfPathFieldNumber = 18;
  private string elfPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ElfPath {
    get { return elfPath_; }
    set {
      elfPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "randomizedPath" field.</summary>
  public const int RandomizedPathFieldNumber = 19;
  private string randomizedPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RandomizedPath {
    get { return randomizedPath_; }
    set {
      randomizedPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "numThreads" field.</summary>
  public const int NumThreadsFieldNumber = 20;
  private int numThreads_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumThreads {
    get { return numThreads_; }
    set {
      numThreads_ = value;
    }
  }

  /// <summary>Field number for the "mapEntries" field.</summary>
  public const int MapEntriesFieldNumber = 21;
  private static readonly pb::FieldCodec<global::DbgVmEntry> _repeated_mapEntries_codec
      = pb::FieldCodec.ForMessage(170, global::DbgVmEntry.Parser);
  private readonly pbc::RepeatedField<global::DbgVmEntry> mapEntries_ = new pbc::RepeatedField<global::DbgVmEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgVmEntry> MapEntries {
    get { return mapEntries_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProcessFull);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProcessFull other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!threads_.Equals(other.threads_)) return false;
    if (!object.Equals(Cred, other.Cred)) return false;
    if (Pid != other.Pid) return false;
    if (ParentProc != other.ParentProc) return false;
    if (Oppid != other.Oppid) return false;
    if (DbgChild != other.DbgChild) return false;
    if (Vmspace != other.Vmspace) return false;
    if (ExitThreads != other.ExitThreads) return false;
    if (SigParent != other.SigParent) return false;
    if (Sig != other.Sig) return false;
    if (Code != other.Code) return false;
    if (Stops != other.Stops) return false;
    if (Stype != other.Stype) return false;
    if (SingleThread != other.SingleThread) return false;
    if (SuspendCount != other.SuspendCount) return false;
    if (Dynlib != other.Dynlib) return false;
    if (Name != other.Name) return false;
    if (ElfPath != other.ElfPath) return false;
    if (RandomizedPath != other.RandomizedPath) return false;
    if (NumThreads != other.NumThreads) return false;
    if(!mapEntries_.Equals(other.mapEntries_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= threads_.GetHashCode();
    if (cred_ != null) hash ^= Cred.GetHashCode();
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (ParentProc != 0UL) hash ^= ParentProc.GetHashCode();
    if (Oppid != 0) hash ^= Oppid.GetHashCode();
    if (DbgChild != 0) hash ^= DbgChild.GetHashCode();
    if (Vmspace != 0UL) hash ^= Vmspace.GetHashCode();
    if (ExitThreads != 0) hash ^= ExitThreads.GetHashCode();
    if (SigParent != 0) hash ^= SigParent.GetHashCode();
    if (Sig != 0) hash ^= Sig.GetHashCode();
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Stops != 0) hash ^= Stops.GetHashCode();
    if (Stype != 0) hash ^= Stype.GetHashCode();
    if (SingleThread != 0UL) hash ^= SingleThread.GetHashCode();
    if (SuspendCount != 0) hash ^= SuspendCount.GetHashCode();
    if (Dynlib != 0UL) hash ^= Dynlib.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (ElfPath.Length != 0) hash ^= ElfPath.GetHashCode();
    if (RandomizedPath.Length != 0) hash ^= RandomizedPath.GetHashCode();
    if (NumThreads != 0) hash ^= NumThreads.GetHashCode();
    hash ^= mapEntries_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    threads_.WriteTo(output, _repeated_threads_codec);
    if (cred_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cred);
    }
    if (Pid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Pid);
    }
    if (ParentProc != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(ParentProc);
    }
    if (Oppid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Oppid);
    }
    if (DbgChild != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(DbgChild);
    }
    if (Vmspace != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Vmspace);
    }
    if (ExitThreads != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(ExitThreads);
    }
    if (SigParent != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(SigParent);
    }
    if (Sig != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Sig);
    }
    if (Code != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(Code);
    }
    if (Stops != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(Stops);
    }
    if (Stype != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(Stype);
    }
    if (SingleThread != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(SingleThread);
    }
    if (SuspendCount != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(SuspendCount);
    }
    if (Dynlib != 0UL) {
      output.WriteRawTag(128, 1);
      output.WriteUInt64(Dynlib);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Name);
    }
    if (ElfPath.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(ElfPath);
    }
    if (RandomizedPath.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(RandomizedPath);
    }
    if (NumThreads != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(NumThreads);
    }
    mapEntries_.WriteTo(output, _repeated_mapEntries_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += threads_.CalculateSize(_repeated_threads_codec);
    if (cred_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cred);
    }
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (ParentProc != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentProc);
    }
    if (Oppid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oppid);
    }
    if (DbgChild != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbgChild);
    }
    if (Vmspace != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Vmspace);
    }
    if (ExitThreads != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitThreads);
    }
    if (SigParent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SigParent);
    }
    if (Sig != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sig);
    }
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
    }
    if (Stops != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stops);
    }
    if (Stype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stype);
    }
    if (SingleThread != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SingleThread);
    }
    if (SuspendCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuspendCount);
    }
    if (Dynlib != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Dynlib);
    }
    if (Name.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (ElfPath.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ElfPath);
    }
    if (RandomizedPath.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(RandomizedPath);
    }
    if (NumThreads != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumThreads);
    }
    size += mapEntries_.CalculateSize(_repeated_mapEntries_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProcessFull other) {
    if (other == null) {
      return;
    }
    threads_.Add(other.threads_);
    if (other.cred_ != null) {
      if (cred_ == null) {
        Cred = new global::DbgCred();
      }
      Cred.MergeFrom(other.Cred);
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.ParentProc != 0UL) {
      ParentProc = other.ParentProc;
    }
    if (other.Oppid != 0) {
      Oppid = other.Oppid;
    }
    if (other.DbgChild != 0) {
      DbgChild = other.DbgChild;
    }
    if (other.Vmspace != 0UL) {
      Vmspace = other.Vmspace;
    }
    if (other.ExitThreads != 0) {
      ExitThreads = other.ExitThreads;
    }
    if (other.SigParent != 0) {
      SigParent = other.SigParent;
    }
    if (other.Sig != 0) {
      Sig = other.Sig;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Stops != 0) {
      Stops = other.Stops;
    }
    if (other.Stype != 0) {
      Stype = other.Stype;
    }
    if (other.SingleThread != 0UL) {
      SingleThread = other.SingleThread;
    }
    if (other.SuspendCount != 0) {
      SuspendCount = other.SuspendCount;
    }
    if (other.Dynlib != 0UL) {
      Dynlib = other.Dynlib;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.ElfPath.Length != 0) {
      ElfPath = other.ElfPath;
    }
    if (other.RandomizedPath.Length != 0) {
      RandomizedPath = other.RandomizedPath;
    }
    if (other.NumThreads != 0) {
      NumThreads = other.NumThreads;
    }
    mapEntries_.Add(other.mapEntries_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          threads_.AddEntriesFrom(input, _repeated_threads_codec);
          break;
        }
        case 18: {
          if (cred_ == null) {
            Cred = new global::DbgCred();
          }
          input.ReadMessage(Cred);
          break;
        }
        case 24: {
          Pid = input.ReadInt32();
          break;
        }
        case 32: {
          ParentProc = input.ReadUInt64();
          break;
        }
        case 40: {
          Oppid = input.ReadInt32();
          break;
        }
        case 48: {
          DbgChild = input.ReadInt32();
          break;
        }
        case 56: {
          Vmspace = input.ReadUInt64();
          break;
        }
        case 64: {
          ExitThreads = input.ReadInt32();
          break;
        }
        case 72: {
          SigParent = input.ReadInt32();
          break;
        }
        case 80: {
          Sig = input.ReadInt32();
          break;
        }
        case 88: {
          Code = input.ReadUInt32();
          break;
        }
        case 96: {
          Stops = input.ReadUInt32();
          break;
        }
        case 104: {
          Stype = input.ReadUInt32();
          break;
        }
        case 112: {
          SingleThread = input.ReadUInt64();
          break;
        }
        case 120: {
          SuspendCount = input.ReadInt32();
          break;
        }
        case 128: {
          Dynlib = input.ReadUInt64();
          break;
        }
        case 138: {
          Name = input.ReadString();
          break;
        }
        case 146: {
          ElfPath = input.ReadString();
          break;
        }
        case 154: {
          RandomizedPath = input.ReadString();
          break;
        }
        case 160: {
          NumThreads = input.ReadInt32();
          break;
        }
        case 170: {
          mapEntries_.AddEntriesFrom(input, _repeated_mapEntries_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgVmEntry : pb::IMessage<DbgVmEntry> {
  private static readonly pb::MessageParser<DbgVmEntry> _parser = new pb::MessageParser<DbgVmEntry>(() => new DbgVmEntry());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgVmEntry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry(DbgVmEntry other) : this() {
    name_ = other.name_;
    start_ = other.start_;
    end_ = other.end_;
    offset_ = other.offset_;
    protection_ = other.protection_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgVmEntry Clone() {
    return new DbgVmEntry(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "start" field.</summary>
  public const int StartFieldNumber = 2;
  private ulong start_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Start {
    get { return start_; }
    set {
      start_ = value;
    }
  }

  /// <summary>Field number for the "end" field.</summary>
  public const int EndFieldNumber = 3;
  private ulong end_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong End {
    get { return end_; }
    set {
      end_ = value;
    }
  }

  /// <summary>Field number for the "offset" field.</summary>
  public const int OffsetFieldNumber = 4;
  private ulong offset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Offset {
    get { return offset_; }
    set {
      offset_ = value;
    }
  }

  /// <summary>Field number for the "protection" field.</summary>
  public const int ProtectionFieldNumber = 5;
  private int protection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Protection {
    get { return protection_; }
    set {
      protection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgVmEntry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgVmEntry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Start != other.Start) return false;
    if (End != other.End) return false;
    if (Offset != other.Offset) return false;
    if (Protection != other.Protection) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Start != 0UL) hash ^= Start.GetHashCode();
    if (End != 0UL) hash ^= End.GetHashCode();
    if (Offset != 0UL) hash ^= Offset.GetHashCode();
    if (Protection != 0) hash ^= Protection.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Start != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Start);
    }
    if (End != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(End);
    }
    if (Offset != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Offset);
    }
    if (Protection != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Protection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Start != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Start);
    }
    if (End != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(End);
    }
    if (Offset != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
    }
    if (Protection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protection);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgVmEntry other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Start != 0UL) {
      Start = other.Start;
    }
    if (other.End != 0UL) {
      End = other.End;
    }
    if (other.Offset != 0UL) {
      Offset = other.Offset;
    }
    if (other.Protection != 0) {
      Protection = other.Protection;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Start = input.ReadUInt64();
          break;
        }
        case 24: {
          End = input.ReadUInt64();
          break;
        }
        case 32: {
          Offset = input.ReadUInt64();
          break;
        }
        case 40: {
          Protection = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgProcessLimited : pb::IMessage<DbgProcessLimited> {
  private static readonly pb::MessageParser<DbgProcessLimited> _parser = new pb::MessageParser<DbgProcessLimited>(() => new DbgProcessLimited());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProcessLimited> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited(DbgProcessLimited other) : this() {
    pid_ = other.pid_;
    name_ = other.name_;
    entries_ = other.entries_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProcessLimited Clone() {
    return new DbgProcessLimited(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "entries" field.</summary>
  public const int EntriesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::DbgVmEntry> _repeated_entries_codec
      = pb::FieldCodec.ForMessage(26, global::DbgVmEntry.Parser);
  private readonly pbc::RepeatedField<global::DbgVmEntry> entries_ = new pbc::RepeatedField<global::DbgVmEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgVmEntry> Entries {
    get { return entries_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProcessLimited);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProcessLimited other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Name != other.Name) return false;
    if(!entries_.Equals(other.entries_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= entries_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    entries_.WriteTo(output, _repeated_entries_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += entries_.CalculateSize(_repeated_entries_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProcessLimited other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    entries_.Add(other.entries_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          entries_.AddEntriesFrom(input, _repeated_entries_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessListResponse : pb::IMessage<DbgGetProcessListResponse> {
  private static readonly pb::MessageParser<DbgGetProcessListResponse> _parser = new pb::MessageParser<DbgGetProcessListResponse>(() => new DbgGetProcessListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse(DbgGetProcessListResponse other) : this() {
    processes_ = other.processes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessListResponse Clone() {
    return new DbgGetProcessListResponse(this);
  }

  /// <summary>Field number for the "processes" field.</summary>
  public const int ProcessesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgProcessLimited> _repeated_processes_codec
      = pb::FieldCodec.ForMessage(10, global::DbgProcessLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgProcessLimited> processes_ = new pbc::RepeatedField<global::DbgProcessLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgProcessLimited> Processes {
    get { return processes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!processes_.Equals(other.processes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= processes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    processes_.WriteTo(output, _repeated_processes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += processes_.CalculateSize(_repeated_processes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessListResponse other) {
    if (other == null) {
      return;
    }
    processes_.Add(other.processes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          processes_.AddEntriesFrom(input, _repeated_processes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadProcessMemoryRequest : pb::IMessage<DbgReadProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgReadProcessMemoryRequest> _parser = new pb::MessageParser<DbgReadProcessMemoryRequest>(() => new DbgReadProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest(DbgReadProcessMemoryRequest other) : this() {
    pid_ = other.pid_;
    address_ = other.address_;
    size_ = other.size_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryRequest Clone() {
    return new DbgReadProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 3;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (Size != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Size);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          Size = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadProcessMemoryResponse : pb::IMessage<DbgReadProcessMemoryResponse> {
  private static readonly pb::MessageParser<DbgReadProcessMemoryResponse> _parser = new pb::MessageParser<DbgReadProcessMemoryResponse>(() => new DbgReadProcessMemoryResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadProcessMemoryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse(DbgReadProcessMemoryResponse other) : this() {
    bytesRead_ = other.bytesRead_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadProcessMemoryResponse Clone() {
    return new DbgReadProcessMemoryResponse(this);
  }

  /// <summary>Field number for the "bytesRead" field.</summary>
  public const int BytesReadFieldNumber = 1;
  private uint bytesRead_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BytesRead {
    get { return bytesRead_; }
    set {
      bytesRead_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadProcessMemoryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadProcessMemoryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BytesRead != other.BytesRead) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BytesRead != 0) hash ^= BytesRead.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BytesRead != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BytesRead);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BytesRead != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BytesRead);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadProcessMemoryResponse other) {
    if (other == null) {
      return;
    }
    if (other.BytesRead != 0) {
      BytesRead = other.BytesRead;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BytesRead = input.ReadUInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWriteProcessMemoryRequest : pb::IMessage<DbgWriteProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgWriteProcessMemoryRequest> _parser = new pb::MessageParser<DbgWriteProcessMemoryRequest>(() => new DbgWriteProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWriteProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest(DbgWriteProcessMemoryRequest other) : this() {
    pid_ = other.pid_;
    address_ = other.address_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteProcessMemoryRequest Clone() {
    return new DbgWriteProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  /// Size is inside here
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWriteProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWriteProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Address != other.Address) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWriteProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgProtectProcessMemoryRequest : pb::IMessage<DbgProtectProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgProtectProcessMemoryRequest> _parser = new pb::MessageParser<DbgProtectProcessMemoryRequest>(() => new DbgProtectProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgProtectProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest(DbgProtectProcessMemoryRequest other) : this() {
    pid_ = other.pid_;
    address_ = other.address_;
    length_ = other.length_;
    protection_ = other.protection_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgProtectProcessMemoryRequest Clone() {
    return new DbgProtectProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 3;
  private ulong length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "protection" field.</summary>
  public const int ProtectionFieldNumber = 4;
  private int protection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Protection {
    get { return protection_; }
    set {
      protection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgProtectProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgProtectProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Address != other.Address) return false;
    if (Length != other.Length) return false;
    if (Protection != other.Protection) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Length != 0UL) hash ^= Length.GetHashCode();
    if (Protection != 0) hash ^= Protection.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (Length != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Length);
    }
    if (Protection != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Protection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Length != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Length);
    }
    if (Protection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protection);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgProtectProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Length != 0UL) {
      Length = other.Length;
    }
    if (other.Protection != 0) {
      Protection = other.Protection;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          Length = input.ReadUInt64();
          break;
        }
        case 32: {
          Protection = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// TODO: Come back to this
/// </summary>
public sealed partial class DbgScanProcessMemoryRequest : pb::IMessage<DbgScanProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgScanProcessMemoryRequest> _parser = new pb::MessageParser<DbgScanProcessMemoryRequest>(() => new DbgScanProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgScanProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest(DbgScanProcessMemoryRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgScanProcessMemoryRequest Clone() {
    return new DbgScanProcessMemoryRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgScanProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgScanProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgScanProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class DbgGetProcessInfoRequest : pb::IMessage<DbgGetProcessInfoRequest> {
  private static readonly pb::MessageParser<DbgGetProcessInfoRequest> _parser = new pb::MessageParser<DbgGetProcessInfoRequest>(() => new DbgGetProcessInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest(DbgGetProcessInfoRequest other) : this() {
    pid_ = other.pid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessInfoRequest Clone() {
    return new DbgGetProcessInfoRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAllocateProcessMemoryRequest : pb::IMessage<DbgAllocateProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgAllocateProcessMemoryRequest> _parser = new pb::MessageParser<DbgAllocateProcessMemoryRequest>(() => new DbgAllocateProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAllocateProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest(DbgAllocateProcessMemoryRequest other) : this() {
    pid_ = other.pid_;
    size_ = other.size_;
    zero_ = other.zero_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryRequest Clone() {
    return new DbgAllocateProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "zero" field.</summary>
  public const int ZeroFieldNumber = 3;
  private bool zero_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Zero {
    get { return zero_; }
    set {
      zero_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAllocateProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAllocateProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Size != other.Size) return false;
    if (Zero != other.Zero) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (Zero != false) hash ^= Zero.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
    if (Zero != false) {
      output.WriteRawTag(24);
      output.WriteBool(Zero);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    if (Zero != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAllocateProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    if (other.Zero != false) {
      Zero = other.Zero;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
        case 24: {
          Zero = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAllocateProcessMemoryResponse : pb::IMessage<DbgAllocateProcessMemoryResponse> {
  private static readonly pb::MessageParser<DbgAllocateProcessMemoryResponse> _parser = new pb::MessageParser<DbgAllocateProcessMemoryResponse>(() => new DbgAllocateProcessMemoryResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAllocateProcessMemoryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse(DbgAllocateProcessMemoryResponse other) : this() {
    address_ = other.address_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAllocateProcessMemoryResponse Clone() {
    return new DbgAllocateProcessMemoryResponse(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAllocateProcessMemoryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAllocateProcessMemoryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAllocateProcessMemoryResponse other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgFreeProcessMemoryRequest : pb::IMessage<DbgFreeProcessMemoryRequest> {
  private static readonly pb::MessageParser<DbgFreeProcessMemoryRequest> _parser = new pb::MessageParser<DbgFreeProcessMemoryRequest>(() => new DbgFreeProcessMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgFreeProcessMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest(DbgFreeProcessMemoryRequest other) : this() {
    pid_ = other.pid_;
    address_ = other.address_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgFreeProcessMemoryRequest Clone() {
    return new DbgFreeProcessMemoryRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgFreeProcessMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgFreeProcessMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Address != other.Address) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgFreeProcessMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessMapsRequest : pb::IMessage<DbgGetProcessMapsRequest> {
  private static readonly pb::MessageParser<DbgGetProcessMapsRequest> _parser = new pb::MessageParser<DbgGetProcessMapsRequest>(() => new DbgGetProcessMapsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessMapsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest(DbgGetProcessMapsRequest other) : this() {
    pid_ = other.pid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessMapsRequest Clone() {
    return new DbgGetProcessMapsRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessMapsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessMapsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessMapsRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgAttachRequest : pb::IMessage<DbgAttachRequest> {
  private static readonly pb::MessageParser<DbgAttachRequest> _parser = new pb::MessageParser<DbgAttachRequest>(() => new DbgAttachRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgAttachRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest(DbgAttachRequest other) : this() {
    pid_ = other.pid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgAttachRequest Clone() {
    return new DbgAttachRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgAttachRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgAttachRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgAttachRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgDetachRequest : pb::IMessage<DbgDetachRequest> {
  private static readonly pb::MessageParser<DbgDetachRequest> _parser = new pb::MessageParser<DbgDetachRequest>(() => new DbgDetachRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgDetachRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest(DbgDetachRequest other) : this() {
    force_ = other.force_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgDetachRequest Clone() {
    return new DbgDetachRequest(this);
  }

  /// <summary>Field number for the "force" field.</summary>
  public const int ForceFieldNumber = 1;
  private bool force_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Force {
    get { return force_; }
    set {
      force_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgDetachRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgDetachRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Force != other.Force) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Force != false) hash ^= Force.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Force != false) {
      output.WriteRawTag(8);
      output.WriteBool(Force);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Force != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgDetachRequest other) {
    if (other == null) {
      return;
    }
    if (other.Force != false) {
      Force = other.Force;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Force = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgBreakpointRequest : pb::IMessage<DbgBreakpointRequest> {
  private static readonly pb::MessageParser<DbgBreakpointRequest> _parser = new pb::MessageParser<DbgBreakpointRequest>(() => new DbgBreakpointRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgBreakpointRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest(DbgBreakpointRequest other) : this() {
    enabled_ = other.enabled_;
    address_ = other.address_;
    original_ = other.original_;
    breakpointType_ = other.breakpointType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointRequest Clone() {
    return new DbgBreakpointRequest(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "original" field.</summary>
  public const int OriginalFieldNumber = 3;
  private uint original_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Original {
    get { return original_; }
    set {
      original_ = value;
    }
  }

  /// <summary>Field number for the "breakpointType" field.</summary>
  public const int BreakpointTypeFieldNumber = 4;
  private global::DbgBreakpointType breakpointType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgBreakpointType BreakpointType {
    get { return breakpointType_; }
    set {
      breakpointType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgBreakpointRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgBreakpointRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    if (Address != other.Address) return false;
    if (Original != other.Original) return false;
    if (BreakpointType != other.BreakpointType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Original != 0) hash ^= Original.GetHashCode();
    if (BreakpointType != 0) hash ^= BreakpointType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (Original != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Original);
    }
    if (BreakpointType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) BreakpointType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Original != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Original);
    }
    if (BreakpointType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BreakpointType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgBreakpointRequest other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Original != 0) {
      Original = other.Original;
    }
    if (other.BreakpointType != 0) {
      BreakpointType = other.BreakpointType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          Original = input.ReadUInt32();
          break;
        }
        case 32: {
          BreakpointType = (global::DbgBreakpointType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgBreakpointResponse : pb::IMessage<DbgBreakpointResponse> {
  private static readonly pb::MessageParser<DbgBreakpointResponse> _parser = new pb::MessageParser<DbgBreakpointResponse>(() => new DbgBreakpointResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgBreakpointResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse(DbgBreakpointResponse other) : this() {
    breakpointHandle_ = other.breakpointHandle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgBreakpointResponse Clone() {
    return new DbgBreakpointResponse(this);
  }

  /// <summary>Field number for the "breakpointHandle" field.</summary>
  public const int BreakpointHandleFieldNumber = 1;
  private ulong breakpointHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong BreakpointHandle {
    get { return breakpointHandle_; }
    set {
      breakpointHandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgBreakpointResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgBreakpointResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BreakpointHandle != other.BreakpointHandle) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BreakpointHandle != 0UL) hash ^= BreakpointHandle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BreakpointHandle != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(BreakpointHandle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BreakpointHandle != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BreakpointHandle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgBreakpointResponse other) {
    if (other == null) {
      return;
    }
    if (other.BreakpointHandle != 0UL) {
      BreakpointHandle = other.BreakpointHandle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BreakpointHandle = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWatchpointRequest : pb::IMessage<DbgWatchpointRequest> {
  private static readonly pb::MessageParser<DbgWatchpointRequest> _parser = new pb::MessageParser<DbgWatchpointRequest>(() => new DbgWatchpointRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWatchpointRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest(DbgWatchpointRequest other) : this() {
    enabled_ = other.enabled_;
    address_ = other.address_;
    breakpointType_ = other.breakpointType_;
    length_ = other.length_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointRequest Clone() {
    return new DbgWatchpointRequest(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "breakpointType" field.</summary>
  public const int BreakpointTypeFieldNumber = 3;
  private uint breakpointType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BreakpointType {
    get { return breakpointType_; }
    set {
      breakpointType_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 4;
  private uint length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWatchpointRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWatchpointRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    if (Address != other.Address) return false;
    if (BreakpointType != other.BreakpointType) return false;
    if (Length != other.Length) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (BreakpointType != 0) hash ^= BreakpointType.GetHashCode();
    if (Length != 0) hash ^= Length.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (Address != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Address);
    }
    if (BreakpointType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(BreakpointType);
    }
    if (Length != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Length);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (BreakpointType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BreakpointType);
    }
    if (Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWatchpointRequest other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.BreakpointType != 0) {
      BreakpointType = other.BreakpointType;
    }
    if (other.Length != 0) {
      Length = other.Length;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          Address = input.ReadUInt64();
          break;
        }
        case 24: {
          BreakpointType = input.ReadUInt32();
          break;
        }
        case 32: {
          Length = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWatchpointResponse : pb::IMessage<DbgWatchpointResponse> {
  private static readonly pb::MessageParser<DbgWatchpointResponse> _parser = new pb::MessageParser<DbgWatchpointResponse>(() => new DbgWatchpointResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWatchpointResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse(DbgWatchpointResponse other) : this() {
    watchpointHandle_ = other.watchpointHandle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWatchpointResponse Clone() {
    return new DbgWatchpointResponse(this);
  }

  /// <summary>Field number for the "watchpointHandle" field.</summary>
  public const int WatchpointHandleFieldNumber = 1;
  private ulong watchpointHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong WatchpointHandle {
    get { return watchpointHandle_; }
    set {
      watchpointHandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWatchpointResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWatchpointResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WatchpointHandle != other.WatchpointHandle) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WatchpointHandle != 0UL) hash ^= WatchpointHandle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WatchpointHandle != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(WatchpointHandle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WatchpointHandle != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WatchpointHandle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWatchpointResponse other) {
    if (other == null) {
      return;
    }
    if (other.WatchpointHandle != 0UL) {
      WatchpointHandle = other.WatchpointHandle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WatchpointHandle = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessThreadsRequest : pb::IMessage<DbgGetProcessThreadsRequest> {
  private static readonly pb::MessageParser<DbgGetProcessThreadsRequest> _parser = new pb::MessageParser<DbgGetProcessThreadsRequest>(() => new DbgGetProcessThreadsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessThreadsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest(DbgGetProcessThreadsRequest other) : this() {
    pid_ = other.pid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsRequest Clone() {
    return new DbgGetProcessThreadsRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessThreadsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessThreadsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessThreadsRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetProcessThreadsResponse : pb::IMessage<DbgGetProcessThreadsResponse> {
  private static readonly pb::MessageParser<DbgGetProcessThreadsResponse> _parser = new pb::MessageParser<DbgGetProcessThreadsResponse>(() => new DbgGetProcessThreadsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetProcessThreadsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse(DbgGetProcessThreadsResponse other) : this() {
    threads_ = other.threads_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetProcessThreadsResponse Clone() {
    return new DbgGetProcessThreadsResponse(this);
  }

  /// <summary>Field number for the "threads" field.</summary>
  public const int ThreadsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DbgThreadLimited> _repeated_threads_codec
      = pb::FieldCodec.ForMessage(10, global::DbgThreadLimited.Parser);
  private readonly pbc::RepeatedField<global::DbgThreadLimited> threads_ = new pbc::RepeatedField<global::DbgThreadLimited>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DbgThreadLimited> Threads {
    get { return threads_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetProcessThreadsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetProcessThreadsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!threads_.Equals(other.threads_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= threads_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    threads_.WriteTo(output, _repeated_threads_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += threads_.CalculateSize(_repeated_threads_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetProcessThreadsResponse other) {
    if (other == null) {
      return;
    }
    threads_.Add(other.threads_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          threads_.AddEntriesFrom(input, _repeated_threads_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgSignalProcessRequest : pb::IMessage<DbgSignalProcessRequest> {
  private static readonly pb::MessageParser<DbgSignalProcessRequest> _parser = new pb::MessageParser<DbgSignalProcessRequest>(() => new DbgSignalProcessRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgSignalProcessRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest(DbgSignalProcessRequest other) : this() {
    pid_ = other.pid_;
    signal_ = other.signal_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSignalProcessRequest Clone() {
    return new DbgSignalProcessRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "signal" field.</summary>
  public const int SignalFieldNumber = 2;
  private int signal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Signal {
    get { return signal_; }
    set {
      signal_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgSignalProcessRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgSignalProcessRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Signal != other.Signal) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Signal != 0) hash ^= Signal.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Signal != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Signal);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Signal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Signal);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgSignalProcessRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Signal != 0) {
      Signal = other.Signal;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Signal = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetRegistersRequest : pb::IMessage<DbgGetRegistersRequest> {
  private static readonly pb::MessageParser<DbgGetRegistersRequest> _parser = new pb::MessageParser<DbgGetRegistersRequest>(() => new DbgGetRegistersRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetRegistersRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest(DbgGetRegistersRequest other) : this() {
    pid_ = other.pid_;
    threadId_ = other.threadId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersRequest Clone() {
    return new DbgGetRegistersRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetRegistersRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetRegistersRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (ThreadId != other.ThreadId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetRegistersRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetRegistersResponse : pb::IMessage<DbgGetRegistersResponse> {
  private static readonly pb::MessageParser<DbgGetRegistersResponse> _parser = new pb::MessageParser<DbgGetRegistersResponse>(() => new DbgGetRegistersResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetRegistersResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse(DbgGetRegistersResponse other) : this() {
    gpRegisters_ = other.gpRegisters_ != null ? other.gpRegisters_.Clone() : null;
    fpRegisters_ = other.fpRegisters_ != null ? other.fpRegisters_.Clone() : null;
    dbRegisters_ = other.dbRegisters_ != null ? other.dbRegisters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetRegistersResponse Clone() {
    return new DbgGetRegistersResponse(this);
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 1;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 2;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 3;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetRegistersResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetRegistersResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (gpRegisters_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DbRegisters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetRegistersResponse other) {
    if (other == null) {
      return;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        GpRegisters = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        FpRegisters = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        DbRegisters = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (gpRegisters_ == null) {
            GpRegisters = new global::DbgGpRegisters();
          }
          input.ReadMessage(GpRegisters);
          break;
        }
        case 18: {
          if (fpRegisters_ == null) {
            FpRegisters = new global::DbgFpRegisters();
          }
          input.ReadMessage(FpRegisters);
          break;
        }
        case 26: {
          if (dbRegisters_ == null) {
            DbRegisters = new global::DbgDbRegisters();
          }
          input.ReadMessage(DbRegisters);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgSetRegistersRequest : pb::IMessage<DbgSetRegistersRequest> {
  private static readonly pb::MessageParser<DbgSetRegistersRequest> _parser = new pb::MessageParser<DbgSetRegistersRequest>(() => new DbgSetRegistersRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgSetRegistersRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest(DbgSetRegistersRequest other) : this() {
    pid_ = other.pid_;
    threadId_ = other.threadId_;
    gpRegisters_ = other.gpRegisters_ != null ? other.gpRegisters_.Clone() : null;
    fpRegisters_ = other.fpRegisters_ != null ? other.fpRegisters_.Clone() : null;
    dbRegisters_ = other.dbRegisters_ != null ? other.dbRegisters_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgSetRegistersRequest Clone() {
    return new DbgSetRegistersRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  /// <summary>Field number for the "gpRegisters" field.</summary>
  public const int GpRegistersFieldNumber = 3;
  private global::DbgGpRegisters gpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgGpRegisters GpRegisters {
    get { return gpRegisters_; }
    set {
      gpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "fpRegisters" field.</summary>
  public const int FpRegistersFieldNumber = 4;
  private global::DbgFpRegisters fpRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgFpRegisters FpRegisters {
    get { return fpRegisters_; }
    set {
      fpRegisters_ = value;
    }
  }

  /// <summary>Field number for the "dbRegisters" field.</summary>
  public const int DbRegistersFieldNumber = 5;
  private global::DbgDbRegisters dbRegisters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgDbRegisters DbRegisters {
    get { return dbRegisters_; }
    set {
      dbRegisters_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgSetRegistersRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgSetRegistersRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (ThreadId != other.ThreadId) return false;
    if (!object.Equals(GpRegisters, other.GpRegisters)) return false;
    if (!object.Equals(FpRegisters, other.FpRegisters)) return false;
    if (!object.Equals(DbRegisters, other.DbRegisters)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (gpRegisters_ != null) hash ^= GpRegisters.GetHashCode();
    if (fpRegisters_ != null) hash ^= FpRegisters.GetHashCode();
    if (dbRegisters_ != null) hash ^= DbRegisters.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (gpRegisters_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GpRegisters);
    }
    if (fpRegisters_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(FpRegisters);
    }
    if (dbRegisters_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DbRegisters);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (gpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpRegisters);
    }
    if (fpRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FpRegisters);
    }
    if (dbRegisters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbRegisters);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgSetRegistersRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    if (other.gpRegisters_ != null) {
      if (gpRegisters_ == null) {
        GpRegisters = new global::DbgGpRegisters();
      }
      GpRegisters.MergeFrom(other.GpRegisters);
    }
    if (other.fpRegisters_ != null) {
      if (fpRegisters_ == null) {
        FpRegisters = new global::DbgFpRegisters();
      }
      FpRegisters.MergeFrom(other.FpRegisters);
    }
    if (other.dbRegisters_ != null) {
      if (dbRegisters_ == null) {
        DbRegisters = new global::DbgDbRegisters();
      }
      DbRegisters.MergeFrom(other.DbRegisters);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
        case 26: {
          if (gpRegisters_ == null) {
            GpRegisters = new global::DbgGpRegisters();
          }
          input.ReadMessage(GpRegisters);
          break;
        }
        case 34: {
          if (fpRegisters_ == null) {
            FpRegisters = new global::DbgFpRegisters();
          }
          input.ReadMessage(FpRegisters);
          break;
        }
        case 42: {
          if (dbRegisters_ == null) {
            DbRegisters = new global::DbgDbRegisters();
          }
          input.ReadMessage(DbRegisters);
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetThreadInfoRequest : pb::IMessage<DbgGetThreadInfoRequest> {
  private static readonly pb::MessageParser<DbgGetThreadInfoRequest> _parser = new pb::MessageParser<DbgGetThreadInfoRequest>(() => new DbgGetThreadInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetThreadInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest(DbgGetThreadInfoRequest other) : this() {
    pid_ = other.pid_;
    threadId_ = other.threadId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetThreadInfoRequest Clone() {
    return new DbgGetThreadInfoRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetThreadInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetThreadInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (ThreadId != other.ThreadId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetThreadInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgThreadSinglestepRequest : pb::IMessage<DbgThreadSinglestepRequest> {
  private static readonly pb::MessageParser<DbgThreadSinglestepRequest> _parser = new pb::MessageParser<DbgThreadSinglestepRequest>(() => new DbgThreadSinglestepRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgThreadSinglestepRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadSinglestepRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadSinglestepRequest(DbgThreadSinglestepRequest other) : this() {
    pid_ = other.pid_;
    threadId_ = other.threadId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgThreadSinglestepRequest Clone() {
    return new DbgThreadSinglestepRequest(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "threadId" field.</summary>
  public const int ThreadIdFieldNumber = 2;
  private int threadId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreadId {
    get { return threadId_; }
    set {
      threadId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgThreadSinglestepRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgThreadSinglestepRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (ThreadId != other.ThreadId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (ThreadId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThreadId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (ThreadId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgThreadSinglestepRequest other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.ThreadId != 0) {
      ThreadId = other.ThreadId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          ThreadId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgGetKernelInfoResponse : pb::IMessage<DbgGetKernelInfoResponse> {
  private static readonly pb::MessageParser<DbgGetKernelInfoResponse> _parser = new pb::MessageParser<DbgGetKernelInfoResponse>(() => new DbgGetKernelInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgGetKernelInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse(DbgGetKernelInfoResponse other) : this() {
    version_ = other.version_;
    gloablConfigData_ = other.gloablConfigData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgGetKernelInfoResponse Clone() {
    return new DbgGetKernelInfoResponse(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private ulong version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "gloablConfigData" field.</summary>
  public const int GloablConfigDataFieldNumber = 2;
  private pb::ByteString gloablConfigData_ = pb::ByteString.Empty;
  /// <summary>
  /// len 140?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString GloablConfigData {
    get { return gloablConfigData_; }
    set {
      gloablConfigData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgGetKernelInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgGetKernelInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (GloablConfigData != other.GloablConfigData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version != 0UL) hash ^= Version.GetHashCode();
    if (GloablConfigData.Length != 0) hash ^= GloablConfigData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Version);
    }
    if (GloablConfigData.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(GloablConfigData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
    }
    if (GloablConfigData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(GloablConfigData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgGetKernelInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Version != 0UL) {
      Version = other.Version;
    }
    if (other.GloablConfigData.Length != 0) {
      GloablConfigData = other.GloablConfigData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Version = input.ReadUInt64();
          break;
        }
        case 18: {
          GloablConfigData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgReadKernelMemoryRequest : pb::IMessage<DbgReadKernelMemoryRequest> {
  private static readonly pb::MessageParser<DbgReadKernelMemoryRequest> _parser = new pb::MessageParser<DbgReadKernelMemoryRequest>(() => new DbgReadKernelMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgReadKernelMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest(DbgReadKernelMemoryRequest other) : this() {
    address_ = other.address_;
    size_ = other.size_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgReadKernelMemoryRequest Clone() {
    return new DbgReadKernelMemoryRequest(this);
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 1;
  private ulong address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private ulong size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgReadKernelMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgReadKernelMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Address != other.Address) return false;
    if (Size != other.Size) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Address != 0UL) hash ^= Address.GetHashCode();
    if (Size != 0UL) hash ^= Size.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Address != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Address);
    }
    if (Size != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Size);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Address != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
    }
    if (Size != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgReadKernelMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Address != 0UL) {
      Address = other.Address;
    }
    if (other.Size != 0UL) {
      Size = other.Size;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Address = input.ReadUInt64();
          break;
        }
        case 16: {
          Size = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgWriteKernelMemoryRequest : pb::IMessage<DbgWriteKernelMemoryRequest> {
  private static readonly pb::MessageParser<DbgWriteKernelMemoryRequest> _parser = new pb::MessageParser<DbgWriteKernelMemoryRequest>(() => new DbgWriteKernelMemoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgWriteKernelMemoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest(DbgWriteKernelMemoryRequest other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgWriteKernelMemoryRequest Clone() {
    return new DbgWriteKernelMemoryRequest(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgWriteKernelMemoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgWriteKernelMemoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgWriteKernelMemoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class DbgCommandRequest : pb::IMessage<DbgCommandRequest> {
  private static readonly pb::MessageParser<DbgCommandRequest> _parser = new pb::MessageParser<DbgCommandRequest>(() => new DbgCommandRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DbgCommandRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DebuggerReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest(DbgCommandRequest other) : this() {
    command_ = other.command_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DbgCommandRequest Clone() {
    return new DbgCommandRequest(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private global::DbgCommandRequest.Types.DbgCommands command_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DbgCommandRequest.Types.DbgCommands Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DbgCommandRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DbgCommandRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Command);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DbgCommandRequest other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Command = (global::DbgCommandRequest.Types.DbgCommands) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DbgCommandRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DbgCommands {
      [pbr::OriginalName("DBG_NONE")] DbgNone = 0,
      [pbr::OriginalName("DBG_REBOOT")] DbgReboot = 1,
      [pbr::OriginalName("DBG_SHUTDOWN")] DbgShutdown = 2,
      [pbr::OriginalName("DBG_PRINT")] DbgPrint = 3,
      [pbr::OriginalName("DBG_NOTIFY")] DbgNotify = 4,
      [pbr::OriginalName("DBG_INFO")] DbgInfo = 5,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
