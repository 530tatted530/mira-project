// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILEMANAGER_MIRA_PLUGINS_FILEMANAGER_H_
#define FLATBUFFERS_GENERATED_FILEMANAGER_MIRA_PLUGINS_FILEMANAGER_H_

#include "flatbuffers/flatbuffers.h"

namespace Mira {
namespace Plugins {
namespace FileManager {

struct EchoRequest;

struct OpenRequest;

struct CloseRequest;

struct SeekRequest;

struct ReadRequest;

struct ReadResponse;

struct WriteRequest;

struct Dent;

struct GetDentsRequest;

struct GetDentsResponse;

struct Timespec;

struct StatRequest;

struct StatResponse;

struct MkdirRequest;

struct RmdirRequest;

struct UnlinkRequest;

struct DecryptSelfRequest;

struct DecryptSelfResponse;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Timespec FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t tv_sec_;
  int32_t tv_nsec_;
  int32_t padding0__;

 public:
  Timespec() {
    memset(this, 0, sizeof(Timespec));
  }
  Timespec(int64_t _tv_sec, int32_t _tv_nsec)
      : tv_sec_(flatbuffers::EndianScalar(_tv_sec)),
        tv_nsec_(flatbuffers::EndianScalar(_tv_nsec)),
        padding0__(0) {
    (void)padding0__;
  }
  int64_t tv_sec() const {
    return flatbuffers::EndianScalar(tv_sec_);
  }
  int32_t tv_nsec() const {
    return flatbuffers::EndianScalar(tv_nsec_);
  }
};
FLATBUFFERS_STRUCT_END(Timespec, 16);

struct EchoRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct EchoRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(EchoRequest::VT_MESSAGE, message);
  }
  explicit EchoRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EchoRequestBuilder &operator=(const EchoRequestBuilder &);
  flatbuffers::Offset<EchoRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EchoRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EchoRequest> CreateEchoRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  EchoRequestBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<EchoRequest> CreateEchoRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return Mira::Plugins::FileManager::CreateEchoRequest(
      _fbb,
      message__);
}

struct OpenRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLAGS = 4,
    VT_MODE = 6,
    VT_PATH = 8
  };
  int32_t flags() const {
    return GetField<int32_t>(VT_FLAGS, 0);
  }
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FLAGS) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct OpenRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_flags(int32_t flags) {
    fbb_.AddElement<int32_t>(OpenRequest::VT_FLAGS, flags, 0);
  }
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(OpenRequest::VT_MODE, mode, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(OpenRequest::VT_PATH, path);
  }
  explicit OpenRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OpenRequestBuilder &operator=(const OpenRequestBuilder &);
  flatbuffers::Offset<OpenRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OpenRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<OpenRequest> CreateOpenRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t flags = 0,
    int32_t mode = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  OpenRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_mode(mode);
  builder_.add_flags(flags);
  return builder_.Finish();
}

inline flatbuffers::Offset<OpenRequest> CreateOpenRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t flags = 0,
    int32_t mode = 0,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateOpenRequest(
      _fbb,
      flags,
      mode,
      path__);
}

struct CloseRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4
  };
  int32_t handle() const {
    return GetField<int32_t>(VT_HANDLE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HANDLE) &&
           verifier.EndTable();
  }
};

struct CloseRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(int32_t handle) {
    fbb_.AddElement<int32_t>(CloseRequest::VT_HANDLE, handle, 0);
  }
  explicit CloseRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CloseRequestBuilder &operator=(const CloseRequestBuilder &);
  flatbuffers::Offset<CloseRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CloseRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CloseRequest> CreateCloseRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0) {
  CloseRequestBuilder builder_(_fbb);
  builder_.add_handle(handle);
  return builder_.Finish();
}

struct SeekRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4,
    VT_OFFSET = 6
  };
  int32_t handle() const {
    return GetField<int32_t>(VT_HANDLE, 0);
  }
  int64_t offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HANDLE) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           verifier.EndTable();
  }
};

struct SeekRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(int32_t handle) {
    fbb_.AddElement<int32_t>(SeekRequest::VT_HANDLE, handle, 0);
  }
  void add_offset(int64_t offset) {
    fbb_.AddElement<int64_t>(SeekRequest::VT_OFFSET, offset, 0);
  }
  explicit SeekRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SeekRequestBuilder &operator=(const SeekRequestBuilder &);
  flatbuffers::Offset<SeekRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SeekRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SeekRequest> CreateSeekRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    int64_t offset = 0) {
  SeekRequestBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_handle(handle);
  return builder_.Finish();
}

struct ReadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4,
    VT_SIZE = 6
  };
  int32_t handle() const {
    return GetField<int32_t>(VT_HANDLE, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HANDLE) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct ReadRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(int32_t handle) {
    fbb_.AddElement<int32_t>(ReadRequest::VT_HANDLE, handle, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(ReadRequest::VT_SIZE, size, 0);
  }
  explicit ReadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadRequestBuilder &operator=(const ReadRequestBuilder &);
  flatbuffers::Offset<ReadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadRequest> CreateReadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    uint64_t size = 0) {
  ReadRequestBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_handle(handle);
  return builder_.Finish();
}

struct ReadResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ReadResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ReadResponse::VT_DATA, data);
  }
  explicit ReadResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadResponseBuilder &operator=(const ReadResponseBuilder &);
  flatbuffers::Offset<ReadResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadResponse> CreateReadResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ReadResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReadResponse> CreateReadResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Mira::Plugins::FileManager::CreateReadResponse(
      _fbb,
      data__);
}

struct WriteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4,
    VT_DATA = 6
  };
  int32_t handle() const {
    return GetField<int32_t>(VT_HANDLE, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HANDLE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct WriteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(int32_t handle) {
    fbb_.AddElement<int32_t>(WriteRequest::VT_HANDLE, handle, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(WriteRequest::VT_DATA, data);
  }
  explicit WriteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WriteRequestBuilder &operator=(const WriteRequestBuilder &);
  flatbuffers::Offset<WriteRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WriteRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<WriteRequest> CreateWriteRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  WriteRequestBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_handle(handle);
  return builder_.Finish();
}

inline flatbuffers::Offset<WriteRequest> CreateWriteRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Mira::Plugins::FileManager::CreateWriteRequest(
      _fbb,
      handle,
      data__);
}

struct Dent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENO = 4,
    VT_RECLEN = 6,
    VT_TYPE = 8,
    VT_NAME = 10
  };
  uint32_t fileno() const {
    return GetField<uint32_t>(VT_FILENO, 0);
  }
  uint32_t recLen() const {
    return GetField<uint32_t>(VT_RECLEN, 0);
  }
  uint32_t type() const {
    return GetField<uint32_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_FILENO) &&
           VerifyField<uint32_t>(verifier, VT_RECLEN) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct DentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileno(uint32_t fileno) {
    fbb_.AddElement<uint32_t>(Dent::VT_FILENO, fileno, 0);
  }
  void add_recLen(uint32_t recLen) {
    fbb_.AddElement<uint32_t>(Dent::VT_RECLEN, recLen, 0);
  }
  void add_type(uint32_t type) {
    fbb_.AddElement<uint32_t>(Dent::VT_TYPE, type, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Dent::VT_NAME, name);
  }
  explicit DentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DentBuilder &operator=(const DentBuilder &);
  flatbuffers::Offset<Dent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Dent>(end);
    return o;
  }
};

inline flatbuffers::Offset<Dent> CreateDent(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t fileno = 0,
    uint32_t recLen = 0,
    uint32_t type = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  DentBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_type(type);
  builder_.add_recLen(recLen);
  builder_.add_fileno(fileno);
  return builder_.Finish();
}

inline flatbuffers::Offset<Dent> CreateDentDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t fileno = 0,
    uint32_t recLen = 0,
    uint32_t type = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Mira::Plugins::FileManager::CreateDent(
      _fbb,
      fileno,
      recLen,
      type,
      name__);
}

struct GetDentsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct GetDentsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(GetDentsRequest::VT_PATH, path);
  }
  explicit GetDentsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDentsRequestBuilder &operator=(const GetDentsRequestBuilder &);
  flatbuffers::Offset<GetDentsRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDentsRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDentsRequest> CreateGetDentsRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  GetDentsRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDentsRequest> CreateGetDentsRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateGetDentsRequest(
      _fbb,
      path__);
}

struct GetDentsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Dent>> *dents() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Dent>> *>(VT_DENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DENTS) &&
           verifier.VerifyVector(dents()) &&
           verifier.VerifyVectorOfTables(dents()) &&
           verifier.EndTable();
  }
};

struct GetDentsResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Dent>>> dents) {
    fbb_.AddOffset(GetDentsResponse::VT_DENTS, dents);
  }
  explicit GetDentsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDentsResponseBuilder &operator=(const GetDentsResponseBuilder &);
  flatbuffers::Offset<GetDentsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDentsResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDentsResponse> CreateGetDentsResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Dent>>> dents = 0) {
  GetDentsResponseBuilder builder_(_fbb);
  builder_.add_dents(dents);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDentsResponse> CreateGetDentsResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Dent>> *dents = nullptr) {
  auto dents__ = dents ? _fbb.CreateVector<flatbuffers::Offset<Dent>>(*dents) : 0;
  return Mira::Plugins::FileManager::CreateGetDentsResponse(
      _fbb,
      dents__);
}

struct StatRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HANDLE = 4,
    VT_PATH = 6
  };
  int32_t handle() const {
    return GetField<int32_t>(VT_HANDLE, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HANDLE) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct StatRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_handle(int32_t handle) {
    fbb_.AddElement<int32_t>(StatRequest::VT_HANDLE, handle, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(StatRequest::VT_PATH, path);
  }
  explicit StatRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StatRequestBuilder &operator=(const StatRequestBuilder &);
  flatbuffers::Offset<StatRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StatRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<StatRequest> CreateStatRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  StatRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_handle(handle);
  return builder_.Finish();
}

inline flatbuffers::Offset<StatRequest> CreateStatRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t handle = 0,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateStatRequest(
      _fbb,
      handle,
      path__);
}

struct StatResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ST_DEV = 4,
    VT_ST_INO = 6,
    VT_ST_MODE = 8,
    VT_ST_NLINK = 10,
    VT_ST_UID = 12,
    VT_ST_GID = 14,
    VT_ST_RDEV = 16,
    VT_ST_ATIM = 18,
    VT_ST_MTIM = 20,
    VT_ST_CTIM = 22,
    VT_ST_SIZE = 24,
    VT_ST_BLOCKS = 26,
    VT_ST_BLKSIZE = 28,
    VT_ST_FLAGS = 30,
    VT_ST_GEN = 32,
    VT_ST_LSPARE = 34,
    VT_ST_BIRTHTIM = 36
  };
  uint32_t st_dev() const {
    return GetField<uint32_t>(VT_ST_DEV, 0);
  }
  uint32_t st_ino() const {
    return GetField<uint32_t>(VT_ST_INO, 0);
  }
  uint32_t st_mode() const {
    return GetField<uint32_t>(VT_ST_MODE, 0);
  }
  uint32_t st_nlink() const {
    return GetField<uint32_t>(VT_ST_NLINK, 0);
  }
  uint32_t st_uid() const {
    return GetField<uint32_t>(VT_ST_UID, 0);
  }
  uint32_t st_gid() const {
    return GetField<uint32_t>(VT_ST_GID, 0);
  }
  uint32_t st_rdev() const {
    return GetField<uint32_t>(VT_ST_RDEV, 0);
  }
  const Timespec *st_atim() const {
    return GetStruct<const Timespec *>(VT_ST_ATIM);
  }
  const Timespec *st_mtim() const {
    return GetStruct<const Timespec *>(VT_ST_MTIM);
  }
  const Timespec *st_ctim() const {
    return GetStruct<const Timespec *>(VT_ST_CTIM);
  }
  int64_t st_size() const {
    return GetField<int64_t>(VT_ST_SIZE, 0);
  }
  int64_t st_blocks() const {
    return GetField<int64_t>(VT_ST_BLOCKS, 0);
  }
  uint32_t st_blksize() const {
    return GetField<uint32_t>(VT_ST_BLKSIZE, 0);
  }
  uint32_t st_flags() const {
    return GetField<uint32_t>(VT_ST_FLAGS, 0);
  }
  uint32_t st_gen() const {
    return GetField<uint32_t>(VT_ST_GEN, 0);
  }
  int32_t st_lspare() const {
    return GetField<int32_t>(VT_ST_LSPARE, 0);
  }
  const Timespec *st_birthtim() const {
    return GetStruct<const Timespec *>(VT_ST_BIRTHTIM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ST_DEV) &&
           VerifyField<uint32_t>(verifier, VT_ST_INO) &&
           VerifyField<uint32_t>(verifier, VT_ST_MODE) &&
           VerifyField<uint32_t>(verifier, VT_ST_NLINK) &&
           VerifyField<uint32_t>(verifier, VT_ST_UID) &&
           VerifyField<uint32_t>(verifier, VT_ST_GID) &&
           VerifyField<uint32_t>(verifier, VT_ST_RDEV) &&
           VerifyField<Timespec>(verifier, VT_ST_ATIM) &&
           VerifyField<Timespec>(verifier, VT_ST_MTIM) &&
           VerifyField<Timespec>(verifier, VT_ST_CTIM) &&
           VerifyField<int64_t>(verifier, VT_ST_SIZE) &&
           VerifyField<int64_t>(verifier, VT_ST_BLOCKS) &&
           VerifyField<uint32_t>(verifier, VT_ST_BLKSIZE) &&
           VerifyField<uint32_t>(verifier, VT_ST_FLAGS) &&
           VerifyField<uint32_t>(verifier, VT_ST_GEN) &&
           VerifyField<int32_t>(verifier, VT_ST_LSPARE) &&
           VerifyField<Timespec>(verifier, VT_ST_BIRTHTIM) &&
           verifier.EndTable();
  }
};

struct StatResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_st_dev(uint32_t st_dev) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_DEV, st_dev, 0);
  }
  void add_st_ino(uint32_t st_ino) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_INO, st_ino, 0);
  }
  void add_st_mode(uint32_t st_mode) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_MODE, st_mode, 0);
  }
  void add_st_nlink(uint32_t st_nlink) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_NLINK, st_nlink, 0);
  }
  void add_st_uid(uint32_t st_uid) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_UID, st_uid, 0);
  }
  void add_st_gid(uint32_t st_gid) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_GID, st_gid, 0);
  }
  void add_st_rdev(uint32_t st_rdev) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_RDEV, st_rdev, 0);
  }
  void add_st_atim(const Timespec *st_atim) {
    fbb_.AddStruct(StatResponse::VT_ST_ATIM, st_atim);
  }
  void add_st_mtim(const Timespec *st_mtim) {
    fbb_.AddStruct(StatResponse::VT_ST_MTIM, st_mtim);
  }
  void add_st_ctim(const Timespec *st_ctim) {
    fbb_.AddStruct(StatResponse::VT_ST_CTIM, st_ctim);
  }
  void add_st_size(int64_t st_size) {
    fbb_.AddElement<int64_t>(StatResponse::VT_ST_SIZE, st_size, 0);
  }
  void add_st_blocks(int64_t st_blocks) {
    fbb_.AddElement<int64_t>(StatResponse::VT_ST_BLOCKS, st_blocks, 0);
  }
  void add_st_blksize(uint32_t st_blksize) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_BLKSIZE, st_blksize, 0);
  }
  void add_st_flags(uint32_t st_flags) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_FLAGS, st_flags, 0);
  }
  void add_st_gen(uint32_t st_gen) {
    fbb_.AddElement<uint32_t>(StatResponse::VT_ST_GEN, st_gen, 0);
  }
  void add_st_lspare(int32_t st_lspare) {
    fbb_.AddElement<int32_t>(StatResponse::VT_ST_LSPARE, st_lspare, 0);
  }
  void add_st_birthtim(const Timespec *st_birthtim) {
    fbb_.AddStruct(StatResponse::VT_ST_BIRTHTIM, st_birthtim);
  }
  explicit StatResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StatResponseBuilder &operator=(const StatResponseBuilder &);
  flatbuffers::Offset<StatResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StatResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<StatResponse> CreateStatResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t st_dev = 0,
    uint32_t st_ino = 0,
    uint32_t st_mode = 0,
    uint32_t st_nlink = 0,
    uint32_t st_uid = 0,
    uint32_t st_gid = 0,
    uint32_t st_rdev = 0,
    const Timespec *st_atim = 0,
    const Timespec *st_mtim = 0,
    const Timespec *st_ctim = 0,
    int64_t st_size = 0,
    int64_t st_blocks = 0,
    uint32_t st_blksize = 0,
    uint32_t st_flags = 0,
    uint32_t st_gen = 0,
    int32_t st_lspare = 0,
    const Timespec *st_birthtim = 0) {
  StatResponseBuilder builder_(_fbb);
  builder_.add_st_blocks(st_blocks);
  builder_.add_st_size(st_size);
  builder_.add_st_birthtim(st_birthtim);
  builder_.add_st_lspare(st_lspare);
  builder_.add_st_gen(st_gen);
  builder_.add_st_flags(st_flags);
  builder_.add_st_blksize(st_blksize);
  builder_.add_st_ctim(st_ctim);
  builder_.add_st_mtim(st_mtim);
  builder_.add_st_atim(st_atim);
  builder_.add_st_rdev(st_rdev);
  builder_.add_st_gid(st_gid);
  builder_.add_st_uid(st_uid);
  builder_.add_st_nlink(st_nlink);
  builder_.add_st_mode(st_mode);
  builder_.add_st_ino(st_ino);
  builder_.add_st_dev(st_dev);
  return builder_.Finish();
}

struct MkdirRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4,
    VT_PATH = 6
  };
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct MkdirRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(MkdirRequest::VT_MODE, mode, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(MkdirRequest::VT_PATH, path);
  }
  explicit MkdirRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MkdirRequestBuilder &operator=(const MkdirRequestBuilder &);
  flatbuffers::Offset<MkdirRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MkdirRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<MkdirRequest> CreateMkdirRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mode = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  MkdirRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<MkdirRequest> CreateMkdirRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mode = 0,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateMkdirRequest(
      _fbb,
      mode,
      path__);
}

struct RmdirRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct RmdirRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(RmdirRequest::VT_PATH, path);
  }
  explicit RmdirRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RmdirRequestBuilder &operator=(const RmdirRequestBuilder &);
  flatbuffers::Offset<RmdirRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RmdirRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<RmdirRequest> CreateRmdirRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  RmdirRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<RmdirRequest> CreateRmdirRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateRmdirRequest(
      _fbb,
      path__);
}

struct UnlinkRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct UnlinkRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(UnlinkRequest::VT_PATH, path);
  }
  explicit UnlinkRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UnlinkRequestBuilder &operator=(const UnlinkRequestBuilder &);
  flatbuffers::Offset<UnlinkRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UnlinkRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<UnlinkRequest> CreateUnlinkRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  UnlinkRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<UnlinkRequest> CreateUnlinkRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateUnlinkRequest(
      _fbb,
      path__);
}

struct DecryptSelfRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct DecryptSelfRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(DecryptSelfRequest::VT_PATH, path);
  }
  explicit DecryptSelfRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DecryptSelfRequestBuilder &operator=(const DecryptSelfRequestBuilder &);
  flatbuffers::Offset<DecryptSelfRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DecryptSelfRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DecryptSelfRequest> CreateDecryptSelfRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  DecryptSelfRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<DecryptSelfRequest> CreateDecryptSelfRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return Mira::Plugins::FileManager::CreateDecryptSelfRequest(
      _fbb,
      path__);
}

struct DecryptSelfResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct DecryptSelfResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(DecryptSelfResponse::VT_DATA, data);
  }
  explicit DecryptSelfResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DecryptSelfResponseBuilder &operator=(const DecryptSelfResponseBuilder &);
  flatbuffers::Offset<DecryptSelfResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DecryptSelfResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DecryptSelfResponse> CreateDecryptSelfResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  DecryptSelfResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DecryptSelfResponse> CreateDecryptSelfResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Mira::Plugins::FileManager::CreateDecryptSelfResponse(
      _fbb,
      data__);
}

}  // namespace FileManager
}  // namespace Plugins
}  // namespace Mira

#endif  // FLATBUFFERS_GENERATED_FILEMANAGER_MIRA_PLUGINS_FILEMANAGER_H_
